{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://ioe2api.ijenko.net/"
        }
    ],
    "info": {
        "contact": {
            "email": "contact@ijenko.com",
            "name": "IJENKO",
            "url": "http://developers.ijenko.com/"
        },
        "title": "IoEÂ² IoT API - to create end-user applications",
        "version": "3.0.0",
        "x-apisguru-categories": [
            "iot"
        ],
        "x-logo": {
            "backgroundColor": "#383D41",
            "url": "https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_1706275304__0_logo_carr__fd_gris_400x400.png"
        },
        "x-origin": [
            {
                "format": "swagger",
                "url": "http://developers.ijenko.com/swagger.json",
                "version": "2.0"
            }
        ],
        "x-preferred": true,
        "x-providerName": "ijenko.net"
    },
    "security": [
        {
            "Token_in_query": []
        },
        {
            "Token_in_Access-Token_header": []
        }
    ],
    "tags": [
        {
            "name": "Entry points"
        },
        {
            "name": "Authentication"
        },
        {
            "name": "Account"
        },
        {
            "name": "User"
        },
        {
            "name": "Place"
        },
        {
            "name": "Device"
        },
        {
            "name": "Functionality"
        },
        {
            "name": "Action"
        },
        {
            "name": "Program"
        },
        {
            "name": "Notification"
        },
        {
            "name": "Electricity"
        }
    ],
    "paths": {
        "/account/change-password": {
            "post": {
                "description": "Set a new password for the account.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Account.changePassword",
                "responses": {
                    "204": {
                        "description": "Change successful."
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Change the password",
                "tags": [
                    "Account"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "newPassword": {
                                        "format": "password",
                                        "minLength": 5,
                                        "type": "string"
                                    },
                                    "oldPassword": {
                                        "format": "password",
                                        "minLength": 5,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "oldPassword",
                                    "newPassword"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "description": "Old and new password",
                    "required": true
                }
            }
        },
        "/account/places": {
            "get": {
                "description": "List the *Places* of the account.\n\n**Note:** requires full access to the *Account*.\n",
                "operationId": "Account.places",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Unique identifier of the *Place*",
                                                "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/places/{id}",
                                                "rel": "full"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List Places of the Account",
                "tags": [
                    "Account"
                ]
            },
            "parameters": [],
            "post": {
                "description": "Create a new *Place*.\n\nA *Device* (`class`: `MINT`, `address`: `0`) is automatically created and attached to the new *Place*.\n\n**Note:** requires full access to the *Account*.\n",
                "operationId": "Account.newPlace",
                "responses": {
                    "201": {
                        "description": "*Place* successfully created.",
                        "headers": {
                            "Location": {
                                "description": "Path of the Place created (`/places/{id}`)",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A resource has been created. The `resource` property gives its reference.",
                                    "example": {
                                        "code": 201,
                                        "message": "Place created",
                                        "resource": {
                                            "entity": "Place",
                                            "href": "/places/3HA6YcSCTSFX6SPPrI9PxQ",
                                            "id": "3HA6YcSCTSFX6SPPrI9PxQ"
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                201
                                            ],
                                            "example": 201,
                                            "type": "integer"
                                        },
                                        "message": {
                                            "enum": [
                                                "Place created"
                                            ],
                                            "type": "string"
                                        },
                                        "resource": {
                                            "example": {
                                                "entity": "Place",
                                                "href": "/places/3HA6YcSCTSFX6SPPrI9PxQ",
                                                "id": "3HA6YcSCTSFX6SPPrI9PxQ"
                                            },
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Place"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Unique identifier of the *Place*",
                                                    "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a Place",
                "tags": [
                    "Account"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "country": {
                                        "description": "Country code (ISO 3166-1 alpha-2)",
                                        "example": "FR",
                                        "maxLength": 2,
                                        "minLength": 2,
                                        "pattern": "^[A-Z][A-Z]$",
                                        "type": "string"
                                    },
                                    "metadata": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                        "type": "object"
                                    },
                                    "name": {
                                        "example": "â Home",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "timeZone": {
                                        "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                                        "example": "Europe/Paris",
                                        "minLength": 2,
                                        "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                                        "type": "string"
                                    },
                                    "zipCode": {
                                        "description": "Postal code",
                                        "maxLength": 10,
                                        "minLength": 0,
                                        "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "zipCode",
                                    "country",
                                    "timeZone"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/account/tokens": {
            "get": {
                "description": "List the active *Tokens* on the account.\n\n**Note:** requires full access to the *Account*.\n",
                "operationId": "Account.tokens",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "description": "Token for User API access",
                                        "properties": {
                                            "appName": {
                                                "description": "Application name",
                                                "example": "Home Eopath",
                                                "type": "string"
                                            },
                                            "id": {
                                                "example": "dfSDdRcsd",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "lastUse": {
                                                "description": "Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "places": {
                                                "description": "List of Places to which the User has access. If absent, it means any Place of the account are allowed.",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "description": "Unique identifier of the *Place*",
                                                            "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                                            "maxLength": 22,
                                                            "minLength": 22,
                                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                                            "readOnly": true,
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "readOnly": true,
                                                    "required": [
                                                        "id",
                                                        "name"
                                                    ],
                                                    "type": "object",
                                                    "x-links": [
                                                        {
                                                            "href": "/places/{id}",
                                                            "rel": "full"
                                                        }
                                                    ]
                                                },
                                                "type": "array",
                                                "uniqueItems": true
                                            },
                                            "refreshTokenExpires": {
                                                "description": "If absent, infinite validity.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "self": {
                                                "description": "True if this token is the one used for this API request",
                                                "type": "boolean"
                                            },
                                            "user": {
                                                "properties": {
                                                    "canLogin": {
                                                        "default": false,
                                                        "description": "true if the user owning the account (can get tokens with /auth/login)",
                                                        "example": false,
                                                        "readOnly": true,
                                                        "type": "boolean"
                                                    },
                                                    "email": {
                                                        "format": "email",
                                                        "minLength": 6,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *User*",
                                                        "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "locale": {
                                                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                                        "example": "fr-FR",
                                                        "minLength": 2,
                                                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                                        "type": "string"
                                                    },
                                                    "metadata": {
                                                        "additionalProperties": {
                                                            "description": "null/boolean/integer/number/string/object/array",
                                                            "x-type": "any"
                                                        },
                                                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                        "type": "object"
                                                    },
                                                    "name": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "phoneNumber": {
                                                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                                                        "example": "+33177494646",
                                                        "minLength": 6,
                                                        "pattern": "^\\+[0-9]{5,}$",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "email",
                                                    "name",
                                                    "locale",
                                                    "id"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/users/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "appName",
                                            "user"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List active Tokens of the Account",
                "tags": [
                    "Account"
                ]
            },
            "parameters": []
        },
        "/account/tokens/{tokenId}": {
            "delete": {
                "description": "Revoke the given *Token*.\n\n**Note:** requires full access to the *Account*.\n",
                "operationId": "Account.revokeToken",
                "responses": {
                    "204": {
                        "description": "Resource successfully deleted."
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Revoke a Token",
                "tags": [
                    "Account"
                ]
            },
            "parameters": [
                {
                    "description": "Identifier of the token",
                    "in": "path",
                    "name": "tokenId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/account/users": {
            "get": {
                "description": "Get the list of *Users* of this *Account*.",
                "operationId": "Account.users",
                "parameters": [
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "canLogin": {
                                                "default": false,
                                                "description": "true if the user owning the account (can get tokens with /auth/login)",
                                                "example": false,
                                                "readOnly": true,
                                                "type": "boolean"
                                            },
                                            "email": {
                                                "format": "email",
                                                "minLength": 6,
                                                "type": "string"
                                            },
                                            "id": {
                                                "description": "Unique identifier of the *User*",
                                                "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "locale": {
                                                "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                                "example": "fr-FR",
                                                "minLength": 2,
                                                "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                "type": "object"
                                            },
                                            "name": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "phoneNumber": {
                                                "description": "Phone number of the *User* in international format, for SMS notifications.",
                                                "example": "+33177494646",
                                                "minLength": 6,
                                                "pattern": "^\\+[0-9]{5,}$",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "email",
                                            "name",
                                            "locale",
                                            "id"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/users/{id}",
                                                "rel": "full"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                },
                "summary": "List Users of the Account",
                "tags": [
                    "Account"
                ]
            },
            "parameters": [],
            "post": {
                "description": "Add a *User*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Account.newUser",
                "responses": {
                    "201": {
                        "description": "*User* successfully created.",
                        "headers": {
                            "Location": {
                                "description": "Path of the User created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A resource has been created. The `resource` property gives its reference.",
                                    "example": {
                                        "code": 201,
                                        "message": "User created",
                                        "resource": {
                                            "entity": "User",
                                            "href": "/users/RGV2aWNlMDAwMDAwMDAwMZ",
                                            "id": "RGV2aWNlMDAwMDAwMDAwMZ"
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                201
                                            ],
                                            "example": 201,
                                            "type": "integer"
                                        },
                                        "message": {
                                            "enum": [
                                                "User created"
                                            ],
                                            "type": "string"
                                        },
                                        "resource": {
                                            "example": {
                                                "entity": "User",
                                                "href": "/users/RGV2aWNlMDAwMDAwMDAwMZ",
                                                "id": "RGV2aWNlMDAwMDAwMDAwMZ"
                                            },
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "User"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Unique identifier of the *User*",
                                                    "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "New User",
                "tags": [
                    "Account"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "format": "email",
                                        "minLength": 6,
                                        "type": "string"
                                    },
                                    "locale": {
                                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                        "example": "fr-FR",
                                        "minLength": 2,
                                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                        "type": "string"
                                    },
                                    "metadata": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                        "type": "object"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                                        "example": "+33177494646",
                                        "minLength": 6,
                                        "pattern": "^\\+[0-9]{5,}$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "email",
                                    "name",
                                    "locale"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/account/users/{userId}": {
            "delete": {
                "description": "Delete a *User* from this *Account*, and revoke all his/her *Tokens*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Account.deleteUser",
                "responses": {
                    "204": {
                        "description": "Resource successfully deleted."
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Delete a User",
                "tags": [
                    "Account"
                ]
            },
            "get": {
                "description": "Get information about a *User* in the same *Account*.",
                "operationId": "Account.getUser",
                "responses": {
                    "200": {
                        "description": "*User* information.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "account": {
                                            "description": "Unique identifier of the *Account*",
                                            "example": "t1hqYcQITCFX-AObjs_t4Q",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "canLogin": {
                                            "default": false,
                                            "description": "true if the user owning the account (can get tokens with /auth/login)",
                                            "example": false,
                                            "readOnly": true,
                                            "type": "boolean"
                                        },
                                        "email": {
                                            "format": "email",
                                            "minLength": 6,
                                            "type": "string"
                                        },
                                        "locale": {
                                            "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                            "example": "fr-FR",
                                            "minLength": 2,
                                            "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "phoneNumber": {
                                            "description": "Phone number of the *User* in international format, for SMS notifications.",
                                            "example": "+33177494646",
                                            "minLength": 6,
                                            "pattern": "^\\+[0-9]{5,}$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "email",
                                        "name",
                                        "locale",
                                        "canLogin"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a User",
                "tags": [
                    "Account"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *User*.",
                    "in": "path",
                    "name": "userId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify a *User*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Account.patchUser",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify a User",
                "tags": [
                    "Account"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "format": "email",
                                        "minLength": 6,
                                        "type": "string"
                                    },
                                    "locale": {
                                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                        "example": "fr-FR",
                                        "minLength": 2,
                                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                        "type": "string"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                                        "example": "+33177494646",
                                        "minLength": 6,
                                        "pattern": "^\\+[0-9]{5,}$",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/account/users/{userId}/metadata": {
            "get": {
                "description": "Get the metadata.",
                "operationId": "User.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Account"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *User*.",
                    "in": "path",
                    "name": "userId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "User.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*User* doesn't exist in this *Account* or the requester doesn't have access to a *Place* on which this *User* has access.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata",
                "tags": [
                    "Account"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Get an access+refresh tokens pair from login and password information.\n\nThe *access token* obtained with this request can then be used in\nan `Access-Token` HTTP header or in a `token` URL query parameter\nin requests that require authentication.\n\nThe *refresh token* can be used with `/auth/refresh` when the *access\ntoken* expires to retrieve a new *access token*. The lifetime of the\nrefresh token is the maximum lifetime of this authentication request.\n\nThe default lifetime of the *refresh token* is defined by the `appId`\nused. The `ttl` input parameter allows to request a *refresh token*\nwith a shorter lifetime.\n\nTo implement *logout*, use `/auth/revoke`.\n",
                "operationId": "AuthAccountLogin",
                "responses": {
                    "200": {
                        "description": "Login successful. The access token is given to use the API. The refresh token must be stored in a safe place.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "accessToken": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "accessTokenExpires": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "refreshToken": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "refreshTokenExpires": {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "accessToken",
                                        "refreshToken",
                                        "accessTokenExpires",
                                        "refreshTokenExpires"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "summary": "Get a token using login+password",
                "tags": [
                    "Authentication",
                    "Entry points"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "appId": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "login": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "password": {
                                        "format": "password",
                                        "minLength": 5,
                                        "type": "string"
                                    },
                                    "ttl": {
                                        "description": "Desired maximum life-time in seconds for the refresh token",
                                        "example": 1800,
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "login",
                                    "password",
                                    "appId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "description": "Login information.",
                    "required": true
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new *access token* using a valid *refresh token*.\n\nThis is a **replacement** of the *access token*: if an existing *access\ntoken* was still not expired, it is invalidated.\n",
                "operationId": "AuthRefreshToken",
                "responses": {
                    "200": {
                        "description": "Refresh successful. A new access token is given to use the API.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "accessToken": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "accessTokenExpires": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "refreshToken": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "refreshTokenExpires": {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "accessToken",
                                        "refreshToken",
                                        "accessTokenExpires",
                                        "refreshTokenExpires"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "summary": "Refresh a token",
                "tags": [
                    "Authentication"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "appId": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "refreshToken": {
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "refreshToken",
                                    "appId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "description": "Refresh token information.",
                    "required": true
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Trigger the request of a new password.\n\nThe account administrator will receive an e-mail with an URL pointing to a form\nto allow him/her to enter a new password.\nThe old password is still functional until a new one is submitted.\n\nEither the login or e-mail of the account must be given.\n",
                "operationId": "AuthResetPassword",
                "responses": {
                    "204": {
                        "description": "As this request is not authenticated, response is always successful to not reveal (in)existence of accounts."
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "summary": "Ask for a new password",
                "tags": [
                    "Authentication"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "appId": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "email": {
                                        "format": "email",
                                        "minLength": 6,
                                        "type": "string"
                                    },
                                    "login": {
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "appId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "description": "Account identification information",
                    "required": true
                }
            }
        },
        "/auth/revoke": {
            "post": {
                "description": "Invalidate the authentication used for the request. The access token and the refresh token will be invalid after this request.\nThis request is typically called to implement logout.\n",
                "operationId": "AuthRevokeToken",
                "responses": {
                    "204": {
                        "description": "Revocation successful. The token used for the request is now invalid."
                    },
                    "401": {
                        "description": "Authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Revoke a token",
                "tags": [
                    "Authentication"
                ]
            }
        },
        "/devices/{deviceId}": {
            "get": {
                "description": "Get information about a *Device*.",
                "operationId": "Devices.get",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "address": {
                                            "minLength": 1,
                                            "pattern": "^[A-Z0-9]{1,32}$",
                                            "type": "string"
                                        },
                                        "attributes": {
                                            "additionalProperties": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Each key is an attribute name",
                                                "type": "object"
                                            },
                                            "description": "Each key is <FunctionalityClass>@<Endpoint>",
                                            "type": "object"
                                        },
                                        "class": {
                                            "maxLength": 4,
                                            "minLength": 4,
                                            "pattern": "^[A-Z][A-Z0-9]{3}$",
                                            "type": "string"
                                        },
                                        "functionalities": {
                                            "items": {
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "device": {
                                                        "description": "Unique identifier of the *Device*",
                                                        "example": "RGV2aWNlMDAwMDAwMDAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "endpoint": {
                                                        "maximum": 255,
                                                        "minimum": 0,
                                                        "readOnly": true,
                                                        "type": "integer"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "metadata": {
                                                        "additionalProperties": {
                                                            "description": "null/boolean/integer/number/string/object/array",
                                                            "x-type": "any"
                                                        },
                                                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                        "type": "object"
                                                    },
                                                    "name": {
                                                        "description": "Free functionality name",
                                                        "type": "string"
                                                    },
                                                    "tags": {
                                                        "items": {
                                                            "maxLength": 21,
                                                            "minLength": 1,
                                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "uniqueItems": true
                                                    }
                                                },
                                                "readOnly": true,
                                                "required": [
                                                    "id",
                                                    "device",
                                                    "class",
                                                    "endpoint"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    },
                                                    {
                                                        "href": "/devices/{device}",
                                                        "rel": "device"
                                                    }
                                                ]
                                            },
                                            "readOnly": true,
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "isOnline": {
                                            "readOnly": true,
                                            "type": "boolean"
                                        },
                                        "manufacturer": {
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "model": {
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Name of the device. User defined.",
                                            "minLength": 2,
                                            "type": "string"
                                        },
                                        "place": {
                                            "description": "Unique identifier of the *Place*",
                                            "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "protocol": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "tags": {
                                            "items": {
                                                "maxLength": 21,
                                                "minLength": 1,
                                                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        }
                                    },
                                    "required": [
                                        "place",
                                        "class",
                                        "address",
                                        "isOnline",
                                        "functionalities",
                                        "tags"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/places/{place}",
                                            "rel": "place"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a Device",
                "tags": [
                    "Device"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Device*.",
                    "in": "path",
                    "name": "deviceId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify information about a *Device*: its name.\n",
                "operationId": "Devices.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Device* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Device",
                "tags": [
                    "Device"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the *Device* as defined by the user. Can be used for user interfaces.",
                                        "minLength": 2,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/devices/{deviceId}/functionalities": {
            "post": {
                "description": "Add a *Functionality* to the device.\n\nRequired parameters are :\n- functionality class\n- endpoint\n\nEach device class has its own restrictions on which Functionality classes can be added and on which endpoints.\nOnly a few devices allow to add Functionalities.\n\n|Device class|Functionality class|Endpoints|\n|------------|-------------------|---------|\n|MINT        |CurrentPeriod      |1,2,3    |\n|MINT        |ElectricityRates   |1,2,3    |\n|MINT        |GenericRate        |1,2,3    |\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Device.addFunctionality",
                "parameters": [
                    {
                        "description": "Unique identifier of a *Device*.",
                        "in": "path",
                        "name": "deviceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "*Functionality* successfully created.",
                        "headers": {
                            "Location": {
                                "description": "Path of the Functionality created",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A resource has been created. The `resource` property gives its reference.",
                                    "example": {
                                        "code": 201,
                                        "message": "Functionality created",
                                        "resource": {
                                            "entity": "Functionality",
                                            "href": "/functionalities/RnVuY3Rpb25hbGl0eTAwMA",
                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                201
                                            ],
                                            "example": 201,
                                            "type": "integer"
                                        },
                                        "message": {
                                            "enum": [
                                                "Functionality created"
                                            ],
                                            "type": "string"
                                        },
                                        "resource": {
                                            "example": {
                                                "entity": "Functionality",
                                                "href": "/functionalities/RnVuY3Rpb25hbGl0eTAwMA",
                                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                            },
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Functionality"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Unique identifier of the *Functionality*",
                                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Device* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Add dynamically a functionality",
                "tags": [
                    "Device",
                    "Functionality"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "class": {
                                        "minLength": 2,
                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                        "readOnly": true,
                                        "type": "string"
                                    },
                                    "endpoint": {
                                        "maximum": 255,
                                        "minimum": 0,
                                        "readOnly": true,
                                        "type": "integer"
                                    },
                                    "metadata": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "Free functionality name",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "required": [
                                    "class",
                                    "endpoint"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/devices/{deviceId}/metadata": {
            "get": {
                "description": "Get the metadata.",
                "operationId": "Device.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Device"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Device*.",
                    "in": "path",
                    "name": "deviceId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "Device.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Device* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata",
                "tags": [
                    "Device"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/devices/{deviceId}/run/{action}": {
            "post": {
                "description": "Run an *Action* on zero, one or multiple Functionalities selected with tags.\n",
                "operationId": "Device.run",
                "parameters": [
                    {
                        "description": "Unique identifier of a *Device*.",
                        "in": "path",
                        "name": "deviceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Identifier of an *Action* inside a *Functionality*.",
                        "in": "path",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â».\n",
                        "in": "query",
                        "name": "functionalities",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^(?:\\\\*|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "example": {
                                            "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "result": [],
                                            "status": 200
                                        },
                                        "properties": {
                                            "functionality": {
                                                "description": "Unique identifier of the *Functionality*",
                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "result": {
                                                "items": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "type": "array"
                                            },
                                            "status": {
                                                "description": "Return code (HTTP status code)",
                                                "example": 200,
                                                "maximum": 599,
                                                "minimum": 200,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "status"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/functionalities/{functionality}",
                                                "rel": "functionality"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "450": {
                        "description": "The gateway of the Place is not reachable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The gateway of the Place is not reachable.",
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                "450"
                                            ],
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Run actions",
                "tags": [
                    "Action"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": [
                                    true,
                                    1,
                                    "hello"
                                ],
                                "items": {
                                    "description": "null/boolean/integer/number/string/object/array",
                                    "x-type": "any"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/devices/{deviceId}/tags": {
            "get": {
                "description": "Get the tags of a *Device*.",
                "operationId": "Device.getTags",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List tags",
                "tags": [
                    "Device"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Device*.",
                    "in": "path",
                    "name": "deviceId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the tags of a *Device*.",
                "operationId": "Device.patchTags",
                "responses": {
                    "200": {
                        "description": "Successful. The new list of tags is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Device* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify tags",
                "tags": [
                    "Device"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "description": "list of tags to add",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    },
                                    "remove": {
                                        "description": "list of tags to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the tags list of the resource.\n",
                    "required": true
                }
            }
        },
        "/functionalities/{functionalityId}": {
            "get": {
                "description": "Get the *Functionality*.",
                "operationId": "Functionalities.get",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "actions": {
                                            "items": {
                                                "minLength": 1,
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "readOnly": true,
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "attributes": {
                                            "items": {
                                                "minLength": 1,
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "readOnly": true,
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "device": {
                                            "description": "Unique identifier of the *Device*",
                                            "example": "RGV2aWNlMDAwMDAwMDAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "endpoint": {
                                            "maximum": 255,
                                            "minimum": 0,
                                            "readOnly": true,
                                            "type": "integer"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "description": "Free functionality name",
                                            "type": "string"
                                        },
                                        "tags": {
                                            "items": {
                                                "maxLength": 21,
                                                "minLength": 1,
                                                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                                "type": "string"
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        }
                                    },
                                    "required": [
                                        "class",
                                        "endpoint",
                                        "device",
                                        "attributes",
                                        "tags"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/devices/{id}",
                                            "rel": "device"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a Functionality",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Functionality*.",
                    "in": "path",
                    "name": "functionalityId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify information about a *Functionality*: its name.\n",
                "operationId": "Functionality.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Functionality* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify a Functionality",
                "tags": [
                    "Functionality"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Free functionality name",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/functionalities/{functionalityId}/attributes": {
            "get": {
                "description": "Get the values of multiple *Attributes* and their history.\n\nIf the `names` parameter is not given, all the attributes of the *Functionality*\nare returned. As the list may be huge, this must be avoided.\n\nIf the `to` parameter is set, `from` must also be set.\n\nIf `from` is not set, only the last value is returned.\n\nThe `surround` parameter allows to ask also for one value beyond each interval boundaries.\n\nThe request may fail if too many values are asked.\n",
                "operationId": "Functionality.values",
                "parameters": [
                    {
                        "description": "One or multiple *Attribute* names separated by commas",
                        "in": "query",
                        "name": "names",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Beginning of the time interval.",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "description": "End of the interval. Default: now.\n",
                        "in": "query",
                        "name": "to",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "description": "If true, return also one value before from and one value after to",
                        "in": "query",
                        "name": "surround",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "items": {
                                            "example": {
                                                "value": 0,
                                                "when": "2014-02-17T12:31:00Z"
                                            },
                                            "properties": {
                                                "value": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "when": {
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "when",
                                                "value"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "description": "Keys are attribute ids",
                                    "example": {
                                        "Counter": [
                                            {
                                                "value": 0,
                                                "when": "2014-02-17T12:31:00Z"
                                            }
                                        ],
                                        "Schedule": [
                                            {
                                                "value": [
                                                    {
                                                        "DTSTAMP": "20120101T000000Z",
                                                        "DTSTART": {
                                                            "": "20120101T063000",
                                                            "TZID": "Europe/Paris"
                                                        },
                                                        "RRULE": {
                                                            "FREQ": "DAILY"
                                                        },
                                                        "SUMMARY": "2",
                                                        "UID": "HP-06h30@si.ijenko.net"
                                                    },
                                                    {
                                                        "DTSTAMP": "20120101T000000Z",
                                                        "DTSTART": {
                                                            "": "20120101T223000",
                                                            "TZID": "Europe/Paris"
                                                        },
                                                        "RRULE": {
                                                            "FREQ": "DAILY"
                                                        },
                                                        "SUMMARY": "3",
                                                        "UID": "HC-22h30@si.ijenko.net"
                                                    }
                                                ],
                                                "when": "2014-02-17T00:00:00Z"
                                            }
                                        ]
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get history of multiple attributes",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Functionality*.",
                    "in": "path",
                    "name": "functionalityId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/functionalities/{functionalityId}/attributes/{attributeName}": {
            "get": {
                "description": "Get the *Attribute* value and the last time when it changed.",
                "operationId": "Functionality.value",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "value": 0,
                                        "when": "2014-02-17T12:31:00Z"
                                    },
                                    "properties": {
                                        "value": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "when": {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "when",
                                        "value"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No value has yet been set on this attribute."
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get an Attribute value",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Functionality*.",
                    "in": "path",
                    "name": "functionalityId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Identifier of an *Attribute* inside a *Functionality*.",
                    "in": "path",
                    "name": "attributeName",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Modify the value of the *Attribute*.",
                "operationId": "Functionality.set",
                "responses": {
                    "204": {
                        "description": "Successful."
                    },
                    "405": {
                        "description": "*Attribute* is not writable.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Action",
                                                        "Attribute",
                                                        "Bus"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "parent": {
                                                    "description": "Container resource.",
                                                    "properties": {
                                                        "entity": {
                                                            "enum": [
                                                                "Place",
                                                                "Functionality"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "entity",
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify an Attribute value",
                "tags": [
                    "Functionality"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "null/boolean/integer/number/string/object/array",
                                "x-type": "any"
                            }
                        }
                    },
                    "description": "New value for the *Attribute*.",
                    "required": true
                }
            }
        },
        "/functionalities/{functionalityId}/metadata": {
            "get": {
                "description": "Get the metadata.",
                "operationId": "Functionality.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Functionality*.",
                    "in": "path",
                    "name": "functionalityId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "Functionality.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Functionality* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata",
                "tags": [
                    "Functionality"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/functionalities/{functionalityId}/run/{action}": {
            "post": {
                "description": "Run an action on the Functionality.\n",
                "operationId": "Functionality.run",
                "parameters": [
                    {
                        "description": "Unique identifier of a *Functionality*.",
                        "in": "path",
                        "name": "functionalityId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Identifier of an *Action* inside a *Functionality*.",
                        "in": "path",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                        "result": [],
                                        "status": 200
                                    },
                                    "properties": {
                                        "functionality": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "result": {
                                            "items": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "type": "array"
                                        },
                                        "status": {
                                            "description": "Return code (HTTP status code)",
                                            "example": 200,
                                            "maximum": 599,
                                            "minimum": 200,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "status"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{functionality}",
                                            "rel": "functionality"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "450": {
                        "description": "The gateway of the Place is not reachable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The gateway of the Place is not reachable.",
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                "450"
                                            ],
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Run an action",
                "tags": [
                    "Action"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": [
                                    true,
                                    1,
                                    "hello"
                                ],
                                "items": {
                                    "description": "null/boolean/integer/number/string/object/array",
                                    "x-type": "any"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/functionalities/{functionalityId}/tags": {
            "get": {
                "description": "Get the tags of a *Functionality*.",
                "operationId": "Functionality.getTags",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List tags",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Functionality*.",
                    "in": "path",
                    "name": "functionalityId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the tags of a *Functionality*.",
                "operationId": "Functionality.patchTags",
                "responses": {
                    "200": {
                        "description": "Successful. The new list of tags is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Functionality* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify tags",
                "tags": [
                    "Functionality"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "description": "list of tags to add",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    },
                                    "remove": {
                                        "description": "list of tags to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the tags list of the resource.\n",
                    "required": true
                }
            }
        },
        "/me": {
            "get": {
                "description": "Get information on the authenticated *User* who does the request.\n\nThe *login* property is returned only if the *User* is the administrator of\nthe *Account*.\n",
                "operationId": "Me.get",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "format": "email",
                                            "minLength": 6,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *User*",
                                            "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "locale": {
                                            "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                            "example": "fr-FR",
                                            "minLength": 2,
                                            "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                            "type": "string"
                                        },
                                        "login": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "phoneNumber": {
                                            "description": "Phone number of the *User* in international format, for SMS notifications.",
                                            "example": "+33177494646",
                                            "minLength": 6,
                                            "pattern": "^\\+[0-9]{5,}$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "email",
                                        "name",
                                        "locale",
                                        "id"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/account/users/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "summary": "Information about the User",
                "tags": [
                    "Entry points"
                ]
            },
            "patch": {
                "description": "Update *User* information (locale).\n",
                "operationId": "Me.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Update User information",
                "tags": [
                    "Entry points"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "locale": {
                                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                        "example": "fr-FR",
                                        "minLength": 2,
                                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Updated user info.",
                    "required": true
                }
            }
        },
        "/notifications/{notificationId}": {
            "delete": {
                "description": "Delete a *Notification*.\n",
                "operationId": "Notification.delete",
                "responses": {
                    "204": {
                        "description": "Resource successfully deleted."
                    },
                    "403": {
                        "description": "*Notification* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Delete a Notification",
                "tags": [
                    "Notification"
                ]
            },
            "get": {
                "description": "Get information about a *Notification*.\n",
                "operationId": "Notifications.get",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "place": {
                                            "description": "Unique identifier of the *Place*",
                                            "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "routing": {
                                            "format": "uri",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "place"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/places/{place}",
                                            "rel": "place"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Notification* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a Notification",
                "tags": [
                    "Notification"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Notification*.",
                    "in": "path",
                    "name": "notificationId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify a *Notification*.\n",
                "operationId": "Notification.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Notification* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify a Notification",
                "tags": [
                    "Notification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "routing": {
                                        "format": "uri",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/notifications/{notificationId}/metadata": {
            "get": {
                "description": "Get the metadata of the *Notification*.",
                "operationId": "Notification.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Notification"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Notification*.",
                    "in": "path",
                    "name": "notificationId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata of a *Notification*.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "Notification.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Notification* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata of a Notification",
                "tags": [
                    "Notification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/places": {
            "get": {
                "description": "List the *Places* to which the *Token* has access.",
                "operationId": "Me.places",
                "parameters": [
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Unique identifier of the *Place*",
                                                "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/places/{id}",
                                                "rel": "full"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    }
                },
                "summary": "List accessible Places",
                "tags": [
                    "Entry points"
                ]
            }
        },
        "/places/{placeId}": {
            "get": {
                "description": "Get information about a *Place*.",
                "operationId": "Places.get",
                "responses": {
                    "200": {
                        "description": "Successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "account": {
                                            "description": "Unique identifier of the *Account*",
                                            "example": "t1hqYcQITCFX-AObjs_t4Q",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "country": {
                                            "description": "Country code (ISO 3166-1 alpha-2)",
                                            "example": "FR",
                                            "maxLength": 2,
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Z]$",
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "example": "â Home",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "timeZone": {
                                            "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                                            "example": "Europe/Paris",
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                                            "type": "string"
                                        },
                                        "zipCode": {
                                            "description": "Postal code",
                                            "maxLength": 10,
                                            "minLength": 0,
                                            "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "zipCode",
                                        "country",
                                        "timeZone"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "*Place* doesn't exist or the requester doesn't have access.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a Place",
                "tags": [
                    "Place"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Change information about a *Place*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Place.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "The authentication token doesn't allow to modify the *Account*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Update a Place",
                "tags": [
                    "Place"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "country": {
                                        "description": "Country code (ISO 3166-1 alpha-2)",
                                        "example": "FR",
                                        "maxLength": 2,
                                        "minLength": 2,
                                        "pattern": "^[A-Z][A-Z]$",
                                        "type": "string"
                                    },
                                    "name": {
                                        "example": "â Home",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "timeZone": {
                                        "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                                        "example": "Europe/Paris",
                                        "minLength": 2,
                                        "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                                        "type": "string"
                                    },
                                    "zipCode": {
                                        "description": "Postal code",
                                        "maxLength": 10,
                                        "minLength": 0,
                                        "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/places/{placeId}/buses": {
            "get": {
                "description": "Get the list of *Buses* available on the gateway of this *Place*.\nIf `withPairing` is `true`, return only buses that allow device pairing (see `/places/{placeId}/buses/{busId}/pairing`).",
                "operationId": "Place.buses",
                "parameters": [
                    {
                        "description": "Filter out buses that have no pairing window",
                        "in": "query",
                        "name": "withPairing",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "functionality": {
                                                "description": "Unique identifier of the *Functionality*",
                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "id": {
                                                "minLength": 3,
                                                "type": "string"
                                            },
                                            "protocol": {
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "functionality",
                                            "protocol"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Bus* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Action",
                                                        "Attribute",
                                                        "Bus"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "parent": {
                                                    "description": "Container resource.",
                                                    "properties": {
                                                        "entity": {
                                                            "enum": [
                                                                "Place",
                                                                "Functionality"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "entity",
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List Buses",
                "tags": [
                    "Place"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/buses/{busId}/pairing": {
            "get": {
                "description": "Get the state of the pairing window of the *Bus*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Place.pairing",
                "responses": {
                    "200": {
                        "description": "State information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "duration": {
                                            "description": "Duration of the pairing window.",
                                            "type": "integer"
                                        },
                                        "enabled": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "enabled"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Bus* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Action",
                                                        "Attribute",
                                                        "Bus"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "parent": {
                                                    "description": "Container resource.",
                                                    "properties": {
                                                        "entity": {
                                                            "enum": [
                                                                "Place",
                                                                "Functionality"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "entity",
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "State of the pairing window",
                "tags": [
                    "Place"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Unique identifier of a *Bus*.",
                    "in": "path",
                    "name": "busId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Open/Close the pairing window.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Place.openPairing",
                "responses": {
                    "200": {
                        "description": "State information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "duration": {
                                            "description": "Duration of the pairing window.",
                                            "type": "integer"
                                        },
                                        "enabled": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "enabled"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Bus* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Action",
                                                        "Attribute",
                                                        "Bus"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "parent": {
                                                    "description": "Container resource.",
                                                    "properties": {
                                                        "entity": {
                                                            "enum": [
                                                                "Place",
                                                                "Functionality"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "entity",
                                                        "id"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Open/Close the pairing window",
                "tags": [
                    "Place"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "duration": {
                                        "description": "Duration of the pairing window.",
                                        "type": "integer"
                                    },
                                    "enabled": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "enabled"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/places/{placeId}/devices": {
            "get": {
                "description": "Get the list of *Devices* available in this *Place*.",
                "operationId": "Place.devices",
                "parameters": [
                    {
                        "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».",
                        "in": "query",
                        "name": "devices",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "pattern": "^(?:\\\\*|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                        }
                    },
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "address": {
                                                "minLength": 1,
                                                "pattern": "^[A-Z0-9]{1,32}$",
                                                "type": "string"
                                            },
                                            "class": {
                                                "maxLength": 4,
                                                "minLength": 4,
                                                "pattern": "^[A-Z][A-Z0-9]{3}$",
                                                "type": "string"
                                            },
                                            "id": {
                                                "description": "Unique identifier of the *Device*",
                                                "example": "RGV2aWNlMDAwMDAwMDAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "isOnline": {
                                                "type": "boolean"
                                            },
                                            "metadata": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                "type": "object"
                                            },
                                            "name": {
                                                "description": "Name of the *Device* as defined by the user. Can be used for user interfaces.",
                                                "minLength": 2,
                                                "type": "string"
                                            },
                                            "place": {
                                                "description": "Unique identifier of the *Place*",
                                                "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "tags": {
                                                "items": {
                                                    "maxLength": 21,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "uniqueItems": true
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "place",
                                            "class",
                                            "address",
                                            "isOnline",
                                            "tags"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/devices/{id}",
                                                "rel": "full"
                                            },
                                            {
                                                "href": "/places/{place}",
                                                "rel": "place"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List of Devices",
                "tags": [
                    "Device"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/electricity/autonomy": {
            "get": {
                "description": "Compute the autonomy rate of the *Place* on a time period.\n\n`autonomy = 1 - (elec_drawn / elec_total_usage)`\n",
                "operationId": "Place.Electricity.autonomy",
                "parameters": [
                    {
                        "description": "A time part of the time span.",
                        "in": "query",
                        "name": "when",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "description": "Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)",
                        "in": "query",
                        "name": "span",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "H",
                                "D",
                                "Wmo",
                                "Wsu",
                                "M",
                                "Y"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "autonomy": 0.4,
                                        "code": 200000,
                                        "from": "2016-03-02T09:00:00Z",
                                        "to": "2016-03-02T10:00:00Z"
                                    },
                                    "properties": {
                                        "autonomy": {
                                            "description": "Average electricity autonomy in % (value in range [0, 1], rounded)",
                                            "example": 0.4,
                                            "maximum": 1,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "code": {
                                            "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                                            "enum": [
                                                200000,
                                                200001,
                                                200002
                                            ],
                                            "example": 200000,
                                            "type": "integer"
                                        },
                                        "from": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "to": {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get autonomy rate of the place",
                "tags": [
                    "Electricity"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/electricity/flows": {
            "get": {
                "description": "Get the mapping of virtual electricity flows to functionalities.\n\nSome rules are applied to expand the virtual flows using the concrete\nflows available.\n\nThe `factor` tells how each energy value coming from a functionality\nmust be added with values from other functionality to compute the\nenergy of the virtual flow. Factors are usually `1` or `-1`.\n\nThe `code` property gives the result which may be partial:\n- If all flows are available, `200000` is returned.\n- If no flows are available (indicating that the place has no\n  electricity functionality or that no functionality has been attached\n  to a flow), the `code` is `200001`. The `missing` property contains\n  all the requested flows.\n- If some flows are missing, the `code` is `200002` and the `missing`\n  property lists them.\n",
                "operationId": "Place.Electricity.getFlows",
                "parameters": [
                    {
                        "description": "Names of the flows requested",
                        "in": "query",
                        "name": "flows",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "battery_charge",
                                    "battery_discharge",
                                    "battery_grid",
                                    "elec_total_gen",
                                    "elec_total_usage",
                                    "elec_feed_in",
                                    "elec_drawn",
                                    "elec_local",
                                    "elec_from_household",
                                    "elec_to_pv",
                                    "elec_usage"
                                ],
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place is available. `code` gives the functional result.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "code": 200000,
                                        "flows": {
                                            "elec_local": [
                                                {
                                                    "class": "ElecMetering",
                                                    "factor": 1,
                                                    "id": "SF4_y4SoTCpYXgGODJplJQ"
                                                }
                                            ],
                                            "elec_total_usage": [
                                                {
                                                    "class": "ElecMetering",
                                                    "factor": 1,
                                                    "flow": "elec_total_gen",
                                                    "id": "SF4_y4SoTCpYXgGODJplJQ"
                                                },
                                                {
                                                    "class": "ElecSmartMetering",
                                                    "factor": 1,
                                                    "flow": "elec_drawn",
                                                    "id": "lvxvQ9SqXCpYSqHOJI7tIA"
                                                },
                                                {
                                                    "class": "ElecSmartMetering",
                                                    "factor": -1,
                                                    "flow": "elec_feed_in",
                                                    "id": "d1xvwdWKWCpYH6GPjovnLg"
                                                }
                                            ]
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                                            "enum": [
                                                200000,
                                                200001,
                                                200002
                                            ],
                                            "example": 200000,
                                            "type": "integer"
                                        },
                                        "flows": {
                                            "properties": {
                                                "battery_charge": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "battery_discharge": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "battery_grid": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_drawn": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_feed_in": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_from_household": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_local": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_to_pv": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_total_gen": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_total_usage": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                },
                                                "elec_usage": {
                                                    "items": {
                                                        "example": {
                                                            "class": "ElecMetering",
                                                            "factor": 1,
                                                            "flow": "elec_total_gen",
                                                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                        },
                                                        "properties": {
                                                            "class": {
                                                                "minLength": 2,
                                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            },
                                                            "factor": {
                                                                "type": "integer"
                                                            },
                                                            "flow": {
                                                                "description": "Name of an electricity flow",
                                                                "enum": [
                                                                    "battery_charge",
                                                                    "battery_discharge",
                                                                    "battery_grid",
                                                                    "elec_total_gen",
                                                                    "elec_total_usage",
                                                                    "elec_feed_in",
                                                                    "elec_drawn",
                                                                    "elec_local",
                                                                    "elec_from_household",
                                                                    "elec_to_pv",
                                                                    "elec_usage"
                                                                ],
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "id": {
                                                                "description": "Unique identifier of the *Functionality*",
                                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                                "maxLength": 22,
                                                                "minLength": 22,
                                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                                "readOnly": true,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "class",
                                                            "flow",
                                                            "factor"
                                                        ],
                                                        "type": "object",
                                                        "x-links": [
                                                            {
                                                                "href": "/functionalities/{id}",
                                                                "rel": "full"
                                                            }
                                                        ]
                                                    },
                                                    "type": "array",
                                                    "uniqueItems": true
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "message": {
                                            "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "missing": {
                                            "description": "List of missing flows (not available either directly or indirectly)",
                                            "properties": {
                                                "battery_charge": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "battery_discharge": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "battery_grid": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_drawn": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_feed_in": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_from_household": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_local": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_to_pv": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_total_gen": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_total_usage": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                },
                                                "elec_usage": {
                                                    "enum": [
                                                        true
                                                    ],
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get electricity virtual flows",
                "tags": [
                    "Electricity"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/electricity/flows/setup": {
            "get": {
                "description": "Get the mapping of functionalities to electricity flows.\n\nA functionality is attached to *at most* one flow.\n",
                "operationId": "Place.Electricity.getFlowsSetup",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "elec_drawn": [
                                            {
                                                "class": "ElecSmartMetering",
                                                "id": "lvxvQ9SqXCpYSqHOJI7tIA"
                                            }
                                        ],
                                        "elec_feed_in": [
                                            {
                                                "class": "ElecSmartMetering",
                                                "id": "d1xvwdWKWCpYH6GPjovnLg"
                                            }
                                        ],
                                        "elec_total_gen": [
                                            {
                                                "class": "ElecMetering",
                                                "id": "SF4_y4SoTCpYXgGODJplJQ"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "battery_charge": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "battery_discharge": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "battery_grid": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_drawn": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_feed_in": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_from_household": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_local": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_to_pv": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_total_gen": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_total_usage": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "elec_usage": {
                                            "items": {
                                                "example": {
                                                    "class": "ElecMetering",
                                                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                                },
                                                "properties": {
                                                    "class": {
                                                        "minLength": 2,
                                                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    },
                                                    "id": {
                                                        "description": "Unique identifier of the *Functionality*",
                                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "maxLength": 22,
                                                        "minLength": 22,
                                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                                        "readOnly": true,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "class"
                                                ],
                                                "type": "object",
                                                "x-links": [
                                                    {
                                                        "href": "/functionalities/{id}",
                                                        "rel": "full"
                                                    }
                                                ]
                                            },
                                            "type": "array",
                                            "uniqueItems": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get electricity flows setup",
                "tags": [
                    "Electricity"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/electricity/self-consumption": {
            "get": {
                "description": "Compute the self-consumption rate of the *Place* on a time period.\n\n`selfConsumption = 1 - (elec_feed_in / elec_total_usage)`\n",
                "operationId": "Place.Electricity.selfConsumption",
                "parameters": [
                    {
                        "description": "A time part of the time span.",
                        "in": "query",
                        "name": "when",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "description": "Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)",
                        "in": "query",
                        "name": "span",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "H",
                                "D",
                                "Wmo",
                                "Wsu",
                                "M",
                                "Y"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "code": 200000,
                                        "from": "2016-03-02T10:00:00Z",
                                        "selfConsumption": 1,
                                        "to": "2016-03-02T11:00:00Z"
                                    },
                                    "properties": {
                                        "code": {
                                            "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                                            "enum": [
                                                200000,
                                                200001,
                                                200002
                                            ],
                                            "example": 200000,
                                            "type": "integer"
                                        },
                                        "from": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "selfConsumption": {
                                            "description": "Average self-consumption rate in % (value in range [0, 1], rounded)",
                                            "example": 0.555555,
                                            "maximum": 1,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "to": {
                                            "format": "date-time",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Get self-consumption rate of the place",
                "tags": [
                    "Electricity"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/places/{placeId}/functionalities": {
            "get": {
                "description": "Get the list of *Functionalities* available in this *Place*.",
                "operationId": "Place.functionalities",
                "parameters": [
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "class": {
                                                "minLength": 2,
                                                "pattern": "^[A-Z][A-Za-z0-9]+$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "device": {
                                                "description": "Unique identifier of the *Device*",
                                                "example": "RGV2aWNlMDAwMDAwMDAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "endpoint": {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "readOnly": true,
                                                "type": "integer"
                                            },
                                            "id": {
                                                "description": "Unique identifier of the *Functionality*",
                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                "type": "object"
                                            },
                                            "name": {
                                                "description": "Free functionality name",
                                                "type": "string"
                                            },
                                            "tags": {
                                                "items": {
                                                    "maxLength": 21,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "uniqueItems": true
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "device",
                                            "class",
                                            "endpoint"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/functionalities/{id}",
                                                "rel": "full"
                                            },
                                            {
                                                "href": "/devices/{device}",
                                                "rel": "device"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List Functionalities",
                "tags": [
                    "Functionality"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».",
                    "in": "query",
                    "name": "devices",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "pattern": "^(?:\\\\*|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                    }
                },
                {
                    "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â».\n",
                    "in": "query",
                    "name": "functionalities",
                    "required": false,
                    "schema": {
                        "type": "string",
                        "pattern": "^(?:\\\\*|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                    }
                }
            ]
        },
        "/places/{placeId}/metadata": {
            "get": {
                "description": "Get the metadata.",
                "operationId": "Place.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Place"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "Place.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Place* doesn't exist or the requester doesn't have access.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata",
                "tags": [
                    "Place"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/places/{placeId}/notifications": {
            "get": {
                "description": "Get the list of *Notifications* available in this *Place*.",
                "operationId": "Place.notifications",
                "parameters": [
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "description": "Notification",
                                        "properties": {
                                            "id": {
                                                "description": "Unique identifier of the *Notification*",
                                                "example": "InovwcCIGM5X7KvKrJ7vJw",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                "type": "object"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/notifications/{id}",
                                                "rel": "full"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List Notifications",
                "tags": [
                    "Notification"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Create a new *Notification*.",
                "operationId": "Place.newNotification",
                "responses": {
                    "201": {
                        "description": "*Notification* successfully created.",
                        "headers": {
                            "Location": {
                                "description": "Path of the Notification created (`/notifications/{id}`)",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A resource has been created. The `resource` property gives its reference.",
                                    "example": {
                                        "code": 201,
                                        "message": "Notification created",
                                        "resource": {
                                            "entity": "Notification",
                                            "href": "/notifications/InovwcCIGM5X7KvKrJ7vJw",
                                            "id": "InovwcCIGM5X7KvKrJ7vJw"
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                201
                                            ],
                                            "example": 201,
                                            "type": "integer"
                                        },
                                        "message": {
                                            "enum": [
                                                "Notification created"
                                            ],
                                            "type": "string"
                                        },
                                        "resource": {
                                            "example": {
                                                "entity": "Notification",
                                                "href": "/notifications/InovwcCIGM5X7KvKrJ7vJw",
                                                "id": "InovwcCIGM5X7KvKrJ7vJw"
                                            },
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Notification"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Unique identifier of the *Notification*",
                                                    "example": "InovwcCIGM5X7KvKrJ7vJw",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Place* doesn't exist or the requester doesn't have access.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a Notification",
                "tags": [
                    "Notification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "metadata": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                        "type": "object"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "routing": {
                                        "format": "uri",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/places/{placeId}/programs": {
            "get": {
                "description": "Get the list of *Programs* available in this *Place*.",
                "operationId": "Place.programs",
                "parameters": [
                    {
                        "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                        "in": "query",
                        "name": "embed-metadata",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "enabled": {
                                                "type": "boolean"
                                            },
                                            "id": {
                                                "description": "Unique identifier of the *Program*",
                                                "example": "3_J_6ZWICc5X_KverorNvw",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "additionalProperties": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                                "type": "object"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "readOnly": true,
                                        "required": [
                                            "id",
                                            "name",
                                            "enabled"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/programs/{id}",
                                                "rel": "full"
                                            }
                                        ]
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List Programs",
                "tags": [
                    "Program"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Place*.",
                    "in": "path",
                    "name": "placeId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Create a new *Program*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Place.newProgram",
                "responses": {
                    "201": {
                        "description": "*Program* successfully created.",
                        "headers": {
                            "Location": {
                                "description": "Path of the Program created (`/programs/{id}`)",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A resource has been created. The `resource` property gives its reference.",
                                    "example": {
                                        "code": 201,
                                        "message": "Program created",
                                        "resource": {
                                            "entity": "Program",
                                            "href": "/programs/3_J_6ZWICc5X_KverorNvw",
                                            "id": "3_J_6ZWICc5X_KverorNvw"
                                        }
                                    },
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                201
                                            ],
                                            "example": 201,
                                            "type": "integer"
                                        },
                                        "message": {
                                            "enum": [
                                                "Program created"
                                            ],
                                            "type": "string"
                                        },
                                        "resource": {
                                            "example": {
                                                "entity": "Program",
                                                "href": "/programs/3_J_6ZWICc5X_KverorNvw",
                                                "id": "3_J_6ZWICc5X_KverorNvw"
                                            },
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Program"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "description": "Unique identifier of the *Program*",
                                                    "example": "3_J_6ZWICc5X_KverorNvw",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Place* doesn't exist or the requester doesn't have access.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Create a Program",
                "tags": [
                    "Program"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "code": [],
                                    "enabled": false,
                                    "name": "NOOP"
                                },
                                "properties": {
                                    "code": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "enabled": {
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "metadata": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                        "type": "object"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "code"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/places/{placeId}/run/{action}": {
            "post": {
                "description": "Run an *Action* on zero, one or multiple *Functionalities* selected with tags.\n\n*Device* and *Functionality* selection are combined with Â« AND Â».\n\nIf no functionality is matched by the device/functionality selection, an empty array is returned.\n",
                "operationId": "Place.run",
                "parameters": [
                    {
                        "description": "Unique identifier of a *Place*.",
                        "in": "path",
                        "name": "placeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Identifier of an *Action* inside a *Functionality*.",
                        "in": "path",
                        "name": "action",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».",
                        "in": "query",
                        "name": "devices",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^(?:\\\\*|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                        }
                    },
                    {
                        "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â».\n",
                        "in": "query",
                        "name": "functionalities",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^(?:\\\\*|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "example": {
                                            "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "result": [],
                                            "status": 200
                                        },
                                        "properties": {
                                            "functionality": {
                                                "description": "Unique identifier of the *Functionality*",
                                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                "maxLength": 22,
                                                "minLength": 22,
                                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                                "readOnly": true,
                                                "type": "string"
                                            },
                                            "result": {
                                                "items": {
                                                    "description": "null/boolean/integer/number/string/object/array",
                                                    "x-type": "any"
                                                },
                                                "type": "array"
                                            },
                                            "status": {
                                                "description": "Return code (HTTP status code)",
                                                "example": 200,
                                                "maximum": 599,
                                                "minimum": 200,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "status"
                                        ],
                                        "type": "object",
                                        "x-links": [
                                            {
                                                "href": "/functionalities/{functionality}",
                                                "rel": "functionality"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "450": {
                        "description": "The gateway of the Place is not reachable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The gateway of the Place is not reachable.",
                                    "properties": {
                                        "code": {
                                            "enum": [
                                                "450"
                                            ],
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Run actions",
                "tags": [
                    "Action"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": [
                                    true,
                                    1,
                                    "hello"
                                ],
                                "items": {
                                    "description": "null/boolean/integer/number/string/object/array",
                                    "x-type": "any"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/programs/{programId}": {
            "delete": {
                "description": "Delete a *Program*.\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Program.delete",
                "responses": {
                    "204": {
                        "description": "Resource successfully deleted."
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Delete a Program",
                "tags": [
                    "Program"
                ]
            },
            "get": {
                "description": "Get information about a *Program*.\n",
                "operationId": "Programs.get",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "code": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "enabled": {
                                            "type": "boolean"
                                        },
                                        "metadata": {
                                            "additionalProperties": {
                                                "description": "null/boolean/integer/number/string/object/array",
                                                "x-type": "any"
                                            },
                                            "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                            "type": "object"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "place": {
                                            "description": "Unique identifier of the *Place*",
                                            "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "enabled",
                                        "code"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/places/{place}",
                                            "rel": "place"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Information about a Program",
                "tags": [
                    "Program"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Program*.",
                    "in": "path",
                    "name": "programId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify a *Program*:\n- name\n- status (enabled/disabled)\n- code\n\n**Note**: requires full access to the *Account*.\n",
                "operationId": "Program.patch",
                "responses": {
                    "204": {
                        "description": "Modification successful."
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify a Program",
                "tags": [
                    "Program"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "enabled": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/programs/{programId}/log": {
            "get": {
                "description": "Get the execution history list of this *Program*.",
                "operationId": "Program.log",
                "parameters": [
                    {
                        "description": "Beginning of the time interval.",
                        "in": "query",
                        "name": "from",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "description": "End of the interval. Default: now.\n",
                        "in": "query",
                        "name": "to",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "actions": {
                                                "items": {
                                                    "example": {
                                                        "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                                        "result": [],
                                                        "status": 200
                                                    },
                                                    "properties": {
                                                        "functionality": {
                                                            "description": "Unique identifier of the *Functionality*",
                                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                                            "maxLength": 22,
                                                            "minLength": 22,
                                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                                            "readOnly": true,
                                                            "type": "string"
                                                        },
                                                        "result": {
                                                            "items": {
                                                                "description": "null/boolean/integer/number/string/object/array",
                                                                "x-type": "any"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "status": {
                                                            "description": "Return code (HTTP status code)",
                                                            "example": 200,
                                                            "maximum": 599,
                                                            "minimum": 200,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object",
                                                    "x-links": [
                                                        {
                                                            "href": "/functionalities/{functionality}",
                                                            "rel": "functionality"
                                                        }
                                                    ]
                                                },
                                                "type": "array"
                                            },
                                            "errors": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "notifications": {
                                                "items": {
                                                    "description": "Unique identifier of the *Notification*",
                                                    "example": "InovwcCIGM5X7KvKrJ7vJw",
                                                    "maxLength": 22,
                                                    "minLength": 22,
                                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                                    "readOnly": true,
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "uniqueItems": true
                                            },
                                            "when": {
                                                "format": "date-time",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "when"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "History of executions of a Program",
                "tags": [
                    "Program"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Program*.",
                    "in": "path",
                    "name": "programId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/programs/{programId}/metadata": {
            "get": {
                "description": "Get the metadata of the *Program*.",
                "operationId": "Program.getMetadata",
                "responses": {
                    "200": {
                        "description": "Successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "List metadata",
                "tags": [
                    "Program"
                ]
            },
            "parameters": [
                {
                    "description": "Unique identifier of a *Program*.",
                    "in": "path",
                    "name": "programId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "patch": {
                "description": "Modify the metadata of a *Program*.\nKeys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.\n",
                "operationId": "Program.patchMetadata",
                "responses": {
                    "200": {
                        "description": "Successful. The new metadata is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Successful, but nothing changed."
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Modify metadata of a Program",
                "tags": [
                    "Program"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "add": {
                                        "additionalProperties": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "description": "list of pairs key/value to add/replace",
                                        "type": "object"
                                    },
                                    "remove": {
                                        "description": "list of keys to remove",
                                        "items": {
                                            "maxLength": 21,
                                            "minLength": 1,
                                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "uniqueItems": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "description": "Modifications to apply to the metadata of the resource.\n",
                    "required": true
                }
            }
        },
        "/programs/{programId}/run": {
            "parameters": [
                {
                    "description": "Unique identifier of a *Program*.",
                    "in": "path",
                    "name": "programId",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Launch the *Program*.\nThe result will be available later in the run history.",
                "operationId": "Program.run",
                "responses": {
                    "204": {
                        "description": "*Program* successfully launched."
                    },
                    "403": {
                        "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An error related to access to an entity (400, 403, 404, 410)",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        },
                                        "resource": {
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Device",
                                                        "Functionality",
                                                        "Notification",
                                                        "Place",
                                                        "Program",
                                                        "User",
                                                        "Account",
                                                        "AccountsBase"
                                                    ],
                                                    "type": "string"
                                                },
                                                "href": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "entity",
                                                "href"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message",
                                        "resource"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Other error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Any error.",
                                    "properties": {
                                        "code": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "code",
                                        "message"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "summary": "Run the Program",
                "tags": [
                    "Program"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AccountId": {
                "description": "Unique identifier of the *Account*",
                "example": "t1hqYcQITCFX-AObjs_t4Q",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "AccountLogin": {
                "minLength": 1,
                "type": "string"
            },
            "ActionArgs": {
                "example": [
                    true,
                    1,
                    "hello"
                ],
                "items": {
                    "description": "null/boolean/integer/number/string/object/array",
                    "x-type": "any"
                },
                "type": "array"
            },
            "ActionMultiResult": {
                "items": {
                    "example": {
                        "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                        "result": [],
                        "status": 200
                    },
                    "properties": {
                        "functionality": {
                            "description": "Unique identifier of the *Functionality*",
                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                            "maxLength": 22,
                            "minLength": 22,
                            "pattern": "^[A-Za-z0-9-_]{22}$",
                            "readOnly": true,
                            "type": "string"
                        },
                        "result": {
                            "items": {
                                "description": "null/boolean/integer/number/string/object/array",
                                "x-type": "any"
                            },
                            "type": "array"
                        },
                        "status": {
                            "description": "Return code (HTTP status code)",
                            "example": 200,
                            "maximum": 599,
                            "minimum": 200,
                            "type": "integer"
                        }
                    },
                    "required": [
                        "status"
                    ],
                    "type": "object",
                    "x-links": [
                        {
                            "href": "/functionalities/{functionality}",
                            "rel": "functionality"
                        }
                    ]
                },
                "type": "array"
            },
            "ActionName": {
                "minLength": 1,
                "readOnly": true,
                "type": "string"
            },
            "ActionResult": {
                "example": {
                    "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                    "result": [],
                    "status": 200
                },
                "properties": {
                    "functionality": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "result": {
                        "items": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "type": "array"
                    },
                    "status": {
                        "description": "Return code (HTTP status code)",
                        "example": 200,
                        "maximum": 599,
                        "minimum": 200,
                        "type": "integer"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/functionalities/{functionality}",
                        "rel": "functionality"
                    }
                ]
            },
            "AnyJSON": {
                "description": "null/boolean/integer/number/string/object/array",
                "x-type": "any"
            },
            "AppId": {
                "minLength": 1,
                "type": "string"
            },
            "AttributeName": {
                "minLength": 1,
                "readOnly": true,
                "type": "string"
            },
            "AttributeValue": {
                "example": {
                    "value": 0,
                    "when": "2014-02-17T12:31:00Z"
                },
                "properties": {
                    "value": {
                        "description": "null/boolean/integer/number/string/object/array",
                        "x-type": "any"
                    },
                    "when": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "when",
                    "value"
                ],
                "type": "object"
            },
            "AttributesValues": {
                "additionalProperties": {
                    "items": {
                        "example": {
                            "value": 0,
                            "when": "2014-02-17T12:31:00Z"
                        },
                        "properties": {
                            "value": {
                                "description": "null/boolean/integer/number/string/object/array",
                                "x-type": "any"
                            },
                            "when": {
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "required": [
                            "when",
                            "value"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "description": "Keys are attribute ids",
                "example": {
                    "Counter": [
                        {
                            "value": 0,
                            "when": "2014-02-17T12:31:00Z"
                        }
                    ],
                    "Schedule": [
                        {
                            "value": [
                                {
                                    "DTSTAMP": "20120101T000000Z",
                                    "DTSTART": {
                                        "": "20120101T063000",
                                        "TZID": "Europe/Paris"
                                    },
                                    "RRULE": {
                                        "FREQ": "DAILY"
                                    },
                                    "SUMMARY": "2",
                                    "UID": "HP-06h30@si.ijenko.net"
                                },
                                {
                                    "DTSTAMP": "20120101T000000Z",
                                    "DTSTART": {
                                        "": "20120101T223000",
                                        "TZID": "Europe/Paris"
                                    },
                                    "RRULE": {
                                        "FREQ": "DAILY"
                                    },
                                    "SUMMARY": "3",
                                    "UID": "HC-22h30@si.ijenko.net"
                                }
                            ],
                            "when": "2014-02-17T00:00:00Z"
                        }
                    ]
                },
                "type": "object"
            },
            "AuthChangePassword": {
                "properties": {
                    "newPassword": {
                        "format": "password",
                        "minLength": 5,
                        "type": "string"
                    },
                    "oldPassword": {
                        "format": "password",
                        "minLength": 5,
                        "type": "string"
                    }
                },
                "required": [
                    "oldPassword",
                    "newPassword"
                ],
                "type": "object"
            },
            "AuthLogin": {
                "properties": {
                    "appId": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "login": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "password": {
                        "format": "password",
                        "minLength": 5,
                        "type": "string"
                    },
                    "ttl": {
                        "description": "Desired maximum life-time in seconds for the refresh token",
                        "example": 1800,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "login",
                    "password",
                    "appId"
                ],
                "type": "object"
            },
            "AuthRefresh": {
                "properties": {
                    "appId": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "refreshToken": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "refreshToken",
                    "appId"
                ],
                "type": "object"
            },
            "AuthResetPassword": {
                "properties": {
                    "appId": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "login": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "appId"
                ],
                "type": "object"
            },
            "AuthTokens": {
                "properties": {
                    "accessToken": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "accessTokenExpires": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "refreshToken": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "refreshTokenExpires": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "accessToken",
                    "refreshToken",
                    "accessTokenExpires",
                    "refreshTokenExpires"
                ],
                "type": "object"
            },
            "BusId": {
                "minLength": 3,
                "type": "string"
            },
            "BusItem": {
                "properties": {
                    "functionality": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "id": {
                        "minLength": 3,
                        "type": "string"
                    },
                    "protocol": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "functionality",
                    "protocol"
                ],
                "type": "object"
            },
            "BusPairing": {
                "properties": {
                    "duration": {
                        "description": "Duration of the pairing window.",
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "type": "object"
            },
            "BusProtocol": {
                "minLength": 1,
                "type": "string"
            },
            "CountryCode": {
                "description": "Country code (ISO 3166-1 alpha-2)",
                "example": "FR",
                "maxLength": 2,
                "minLength": 2,
                "pattern": "^[A-Z][A-Z]$",
                "type": "string"
            },
            "DefaultError": {
                "description": "Any error.",
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message"
                ],
                "type": "object"
            },
            "Device": {
                "properties": {
                    "address": {
                        "minLength": 1,
                        "pattern": "^[A-Z0-9]{1,32}$",
                        "type": "string"
                    },
                    "attributes": {
                        "additionalProperties": {
                            "additionalProperties": {
                                "description": "null/boolean/integer/number/string/object/array",
                                "x-type": "any"
                            },
                            "description": "Each key is an attribute name",
                            "type": "object"
                        },
                        "description": "Each key is <FunctionalityClass>@<Endpoint>",
                        "type": "object"
                    },
                    "class": {
                        "maxLength": 4,
                        "minLength": 4,
                        "pattern": "^[A-Z][A-Z0-9]{3}$",
                        "type": "string"
                    },
                    "functionalities": {
                        "items": {
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "device": {
                                    "description": "Unique identifier of the *Device*",
                                    "example": "RGV2aWNlMDAwMDAwMDAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "endpoint": {
                                    "maximum": 255,
                                    "minimum": 0,
                                    "readOnly": true,
                                    "type": "integer"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "metadata": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                    "type": "object"
                                },
                                "name": {
                                    "description": "Free functionality name",
                                    "type": "string"
                                },
                                "tags": {
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "readOnly": true,
                            "required": [
                                "id",
                                "device",
                                "class",
                                "endpoint"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                },
                                {
                                    "href": "/devices/{device}",
                                    "rel": "device"
                                }
                            ]
                        },
                        "readOnly": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "isOnline": {
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "manufacturer": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "model": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device. User defined.",
                        "minLength": 2,
                        "type": "string"
                    },
                    "place": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "protocol": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "place",
                    "class",
                    "address",
                    "isOnline",
                    "functionalities",
                    "tags"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/places/{place}",
                        "rel": "place"
                    }
                ]
            },
            "DeviceAddress": {
                "minLength": 1,
                "pattern": "^[A-Z0-9]{1,32}$",
                "type": "string"
            },
            "DeviceClass": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^[A-Z][A-Z0-9]{3}$",
                "type": "string"
            },
            "DeviceId": {
                "description": "Unique identifier of the *Device*",
                "example": "RGV2aWNlMDAwMDAwMDAwMA",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "DeviceItem": {
                "properties": {
                    "address": {
                        "minLength": 1,
                        "pattern": "^[A-Z0-9]{1,32}$",
                        "type": "string"
                    },
                    "class": {
                        "maxLength": 4,
                        "minLength": 4,
                        "pattern": "^[A-Z][A-Z0-9]{3}$",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Device*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "isOnline": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the *Device* as defined by the user. Can be used for user interfaces.",
                        "minLength": 2,
                        "type": "string"
                    },
                    "place": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "place",
                    "class",
                    "address",
                    "isOnline",
                    "tags"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/devices/{id}",
                        "rel": "full"
                    },
                    {
                        "href": "/places/{place}",
                        "rel": "place"
                    }
                ]
            },
            "DevicePatch": {
                "properties": {
                    "name": {
                        "description": "Name of the *Device* as defined by the user. Can be used for user interfaces.",
                        "minLength": 2,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeviceTag": {
                "maxLength": 21,
                "minLength": 1,
                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                "type": "string"
            },
            "ElectricityAutonomy": {
                "example": {
                    "autonomy": 0.4,
                    "code": 200000,
                    "from": "2016-03-02T09:00:00Z",
                    "to": "2016-03-02T10:00:00Z"
                },
                "properties": {
                    "autonomy": {
                        "description": "Average electricity autonomy in % (value in range [0, 1], rounded)",
                        "example": 0.4,
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "code": {
                        "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                        "enum": [
                            200000,
                            200001,
                            200002
                        ],
                        "example": 200000,
                        "type": "integer"
                    },
                    "from": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "to": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ],
                "type": "object"
            },
            "ElectricityFlow": {
                "items": {
                    "example": {
                        "class": "ElecMetering",
                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                    },
                    "properties": {
                        "class": {
                            "minLength": 2,
                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                            "readOnly": true,
                            "type": "string"
                        },
                        "id": {
                            "description": "Unique identifier of the *Functionality*",
                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                            "maxLength": 22,
                            "minLength": 22,
                            "pattern": "^[A-Za-z0-9-_]{22}$",
                            "readOnly": true,
                            "type": "string"
                        }
                    },
                    "required": [
                        "id",
                        "class"
                    ],
                    "type": "object",
                    "x-links": [
                        {
                            "href": "/functionalities/{id}",
                            "rel": "full"
                        }
                    ]
                },
                "type": "array",
                "uniqueItems": true
            },
            "ElectricityFlowFormula": {
                "items": {
                    "example": {
                        "class": "ElecMetering",
                        "factor": 1,
                        "flow": "elec_total_gen",
                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                    },
                    "properties": {
                        "class": {
                            "minLength": 2,
                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                            "readOnly": true,
                            "type": "string"
                        },
                        "factor": {
                            "type": "integer"
                        },
                        "flow": {
                            "description": "Name of an electricity flow",
                            "enum": [
                                "battery_charge",
                                "battery_discharge",
                                "battery_grid",
                                "elec_total_gen",
                                "elec_total_usage",
                                "elec_feed_in",
                                "elec_drawn",
                                "elec_local",
                                "elec_from_household",
                                "elec_to_pv",
                                "elec_usage"
                            ],
                            "minLength": 1,
                            "type": "string"
                        },
                        "id": {
                            "description": "Unique identifier of the *Functionality*",
                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                            "maxLength": 22,
                            "minLength": 22,
                            "pattern": "^[A-Za-z0-9-_]{22}$",
                            "readOnly": true,
                            "type": "string"
                        }
                    },
                    "required": [
                        "id",
                        "class",
                        "flow",
                        "factor"
                    ],
                    "type": "object",
                    "x-links": [
                        {
                            "href": "/functionalities/{id}",
                            "rel": "full"
                        }
                    ]
                },
                "type": "array",
                "uniqueItems": true
            },
            "ElectricityFlowFunctionality": {
                "example": {
                    "class": "ElecMetering",
                    "factor": 1,
                    "flow": "elec_total_gen",
                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                },
                "properties": {
                    "class": {
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "factor": {
                        "type": "integer"
                    },
                    "flow": {
                        "description": "Name of an electricity flow",
                        "enum": [
                            "battery_charge",
                            "battery_discharge",
                            "battery_grid",
                            "elec_total_gen",
                            "elec_total_usage",
                            "elec_feed_in",
                            "elec_drawn",
                            "elec_local",
                            "elec_from_household",
                            "elec_to_pv",
                            "elec_usage"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "class",
                    "flow",
                    "factor"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/functionalities/{id}",
                        "rel": "full"
                    }
                ]
            },
            "ElectricityFlowName": {
                "description": "Name of an electricity flow",
                "enum": [
                    "battery_charge",
                    "battery_discharge",
                    "battery_grid",
                    "elec_total_gen",
                    "elec_total_usage",
                    "elec_feed_in",
                    "elec_drawn",
                    "elec_local",
                    "elec_from_household",
                    "elec_to_pv",
                    "elec_usage"
                ],
                "minLength": 1,
                "type": "string"
            },
            "ElectricityFlows": {
                "example": {
                    "code": 200000,
                    "flows": {
                        "elec_local": [
                            {
                                "class": "ElecMetering",
                                "factor": 1,
                                "id": "SF4_y4SoTCpYXgGODJplJQ"
                            }
                        ],
                        "elec_total_usage": [
                            {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "SF4_y4SoTCpYXgGODJplJQ"
                            },
                            {
                                "class": "ElecSmartMetering",
                                "factor": 1,
                                "flow": "elec_drawn",
                                "id": "lvxvQ9SqXCpYSqHOJI7tIA"
                            },
                            {
                                "class": "ElecSmartMetering",
                                "factor": -1,
                                "flow": "elec_feed_in",
                                "id": "d1xvwdWKWCpYH6GPjovnLg"
                            }
                        ]
                    }
                },
                "properties": {
                    "code": {
                        "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                        "enum": [
                            200000,
                            200001,
                            200002
                        ],
                        "example": 200000,
                        "type": "integer"
                    },
                    "flows": {
                        "properties": {
                            "battery_charge": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "battery_discharge": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "battery_grid": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_drawn": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_feed_in": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_from_household": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_local": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_to_pv": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_total_gen": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_total_usage": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            "elec_usage": {
                                "items": {
                                    "example": {
                                        "class": "ElecMetering",
                                        "factor": 1,
                                        "flow": "elec_total_gen",
                                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                                    },
                                    "properties": {
                                        "class": {
                                            "minLength": 2,
                                            "pattern": "^[A-Z][A-Za-z0-9]+$",
                                            "readOnly": true,
                                            "type": "string"
                                        },
                                        "factor": {
                                            "type": "integer"
                                        },
                                        "flow": {
                                            "description": "Name of an electricity flow",
                                            "enum": [
                                                "battery_charge",
                                                "battery_discharge",
                                                "battery_grid",
                                                "elec_total_gen",
                                                "elec_total_usage",
                                                "elec_feed_in",
                                                "elec_drawn",
                                                "elec_local",
                                                "elec_from_household",
                                                "elec_to_pv",
                                                "elec_usage"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "Unique identifier of the *Functionality*",
                                            "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                            "maxLength": 22,
                                            "minLength": 22,
                                            "pattern": "^[A-Za-z0-9-_]{22}$",
                                            "readOnly": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "class",
                                        "flow",
                                        "factor"
                                    ],
                                    "type": "object",
                                    "x-links": [
                                        {
                                            "href": "/functionalities/{id}",
                                            "rel": "full"
                                        }
                                    ]
                                },
                                "type": "array",
                                "uniqueItems": true
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "missing": {
                        "description": "List of missing flows (not available either directly or indirectly)",
                        "properties": {
                            "battery_charge": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "battery_discharge": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "battery_grid": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_drawn": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_feed_in": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_from_household": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_local": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_to_pv": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_total_gen": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_total_usage": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            },
                            "elec_usage": {
                                "enum": [
                                    true
                                ],
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "code"
                ],
                "type": "object"
            },
            "ElectricityFlowsSetup": {
                "example": {
                    "elec_drawn": [
                        {
                            "class": "ElecSmartMetering",
                            "id": "lvxvQ9SqXCpYSqHOJI7tIA"
                        }
                    ],
                    "elec_feed_in": [
                        {
                            "class": "ElecSmartMetering",
                            "id": "d1xvwdWKWCpYH6GPjovnLg"
                        }
                    ],
                    "elec_total_gen": [
                        {
                            "class": "ElecMetering",
                            "id": "SF4_y4SoTCpYXgGODJplJQ"
                        }
                    ]
                },
                "properties": {
                    "battery_charge": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "battery_discharge": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "battery_grid": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_drawn": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_feed_in": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_from_household": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_local": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_to_pv": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_total_gen": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_total_usage": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_usage": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "ElectricityFunctionality": {
                "example": {
                    "class": "ElecMetering",
                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                },
                "properties": {
                    "class": {
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "class"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/functionalities/{id}",
                        "rel": "full"
                    }
                ]
            },
            "ElectricityMissingFlows": {
                "description": "List of missing flows (not available either directly or indirectly)",
                "properties": {
                    "battery_charge": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "battery_discharge": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "battery_grid": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_drawn": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_feed_in": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_from_household": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_local": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_to_pv": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_total_gen": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_total_usage": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    },
                    "elec_usage": {
                        "enum": [
                            true
                        ],
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ElectricitySelfConsumption": {
                "example": {
                    "code": 200000,
                    "from": "2016-03-02T10:00:00Z",
                    "selfConsumption": 1,
                    "to": "2016-03-02T11:00:00Z"
                },
                "properties": {
                    "code": {
                        "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                        "enum": [
                            200000,
                            200001,
                            200002
                        ],
                        "example": 200000,
                        "type": "integer"
                    },
                    "from": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                        "minLength": 1,
                        "type": "string"
                    },
                    "selfConsumption": {
                        "description": "Average self-consumption rate in % (value in range [0, 1], rounded)",
                        "example": 0.555555,
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "to": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ],
                "type": "object"
            },
            "ElectricityStatusCode": {
                "description": "Status code. 200000 means OK. Other codes indicate full or partial failure.",
                "enum": [
                    200000,
                    200001,
                    200002
                ],
                "example": 200000,
                "type": "integer"
            },
            "ElectricityStatusMessage": {
                "description": "Message for cases where computation is not possible (codes 200001, 200002)",
                "minLength": 1,
                "type": "string"
            },
            "ElectricityVirtualFlows": {
                "properties": {
                    "battery_charge": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "battery_discharge": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "battery_grid": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_drawn": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_feed_in": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_from_household": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_local": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_to_pv": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_total_gen": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_total_usage": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "elec_usage": {
                        "items": {
                            "example": {
                                "class": "ElecMetering",
                                "factor": 1,
                                "flow": "elec_total_gen",
                                "id": "RnVuY3Rpb25hbGl0eTAwMA"
                            },
                            "properties": {
                                "class": {
                                    "minLength": 2,
                                    "pattern": "^[A-Z][A-Za-z0-9]+$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "factor": {
                                    "type": "integer"
                                },
                                "flow": {
                                    "description": "Name of an electricity flow",
                                    "enum": [
                                        "battery_charge",
                                        "battery_discharge",
                                        "battery_grid",
                                        "elec_total_gen",
                                        "elec_total_usage",
                                        "elec_feed_in",
                                        "elec_drawn",
                                        "elec_local",
                                        "elec_from_household",
                                        "elec_to_pv",
                                        "elec_usage"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "id": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "class",
                                "flow",
                                "factor"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "ErrorEntity": {
                "description": "An error related to access to an entity (400, 403, 404, 410)",
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "resource": {
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Device",
                                    "Functionality",
                                    "Notification",
                                    "Place",
                                    "Program",
                                    "User",
                                    "Account",
                                    "AccountsBase"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "ErrorGatewayUnreachable": {
                "description": "The gateway of the Place is not reachable.",
                "properties": {
                    "code": {
                        "enum": [
                            "450"
                        ],
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message"
                ],
                "type": "object"
            },
            "ErrorSubEntity": {
                "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "resource": {
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Action",
                                    "Attribute",
                                    "Bus"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "parent": {
                                "description": "Container resource.",
                                "properties": {
                                    "entity": {
                                        "enum": [
                                            "Place",
                                            "Functionality"
                                        ],
                                        "type": "string"
                                    },
                                    "id": {
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "entity",
                                    "id"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "Functionality": {
                "properties": {
                    "actions": {
                        "items": {
                            "minLength": 1,
                            "readOnly": true,
                            "type": "string"
                        },
                        "readOnly": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "attributes": {
                        "items": {
                            "minLength": 1,
                            "readOnly": true,
                            "type": "string"
                        },
                        "readOnly": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "class": {
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "device": {
                        "description": "Unique identifier of the *Device*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "endpoint": {
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "description": "Free functionality name",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "class",
                    "endpoint",
                    "device",
                    "attributes",
                    "tags"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/devices/{id}",
                        "rel": "device"
                    }
                ]
            },
            "FunctionalityClass": {
                "minLength": 2,
                "pattern": "^[A-Z][A-Za-z0-9]+$",
                "readOnly": true,
                "type": "string"
            },
            "FunctionalityCreated": {
                "description": "A resource has been created. The `resource` property gives its reference.",
                "example": {
                    "code": 201,
                    "message": "Functionality created",
                    "resource": {
                        "entity": "Functionality",
                        "href": "/functionalities/RnVuY3Rpb25hbGl0eTAwMA",
                        "id": "RnVuY3Rpb25hbGl0eTAwMA"
                    }
                },
                "properties": {
                    "code": {
                        "enum": [
                            201
                        ],
                        "example": 201,
                        "type": "integer"
                    },
                    "message": {
                        "enum": [
                            "Functionality created"
                        ],
                        "type": "string"
                    },
                    "resource": {
                        "example": {
                            "entity": "Functionality",
                            "href": "/functionalities/RnVuY3Rpb25hbGl0eTAwMA",
                            "id": "RnVuY3Rpb25hbGl0eTAwMA"
                        },
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Functionality"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *Functionality*",
                                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "FunctionalityEndpoint": {
                "maximum": 255,
                "minimum": 0,
                "readOnly": true,
                "type": "integer"
            },
            "FunctionalityId": {
                "description": "Unique identifier of the *Functionality*",
                "example": "RnVuY3Rpb25hbGl0eTAwMA",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "FunctionalityItem": {
                "properties": {
                    "class": {
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "device": {
                        "description": "Unique identifier of the *Device*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "endpoint": {
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                        "type": "object"
                    },
                    "name": {
                        "description": "Free functionality name",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "device",
                    "class",
                    "endpoint"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/functionalities/{id}",
                        "rel": "full"
                    },
                    {
                        "href": "/devices/{device}",
                        "rel": "device"
                    }
                ]
            },
            "FunctionalityName": {
                "description": "Free functionality name",
                "type": "string"
            },
            "FunctionalityNew": {
                "properties": {
                    "class": {
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9]+$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "endpoint": {
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "integer"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "description": "Free functionality name",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "class",
                    "endpoint"
                ],
                "type": "object"
            },
            "FunctionalityPatch": {
                "properties": {
                    "name": {
                        "description": "Free functionality name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FunctionalityResource": {
                "example": {
                    "entity": "Functionality",
                    "href": "/functionalities/RnVuY3Rpb25hbGl0eTAwMA",
                    "id": "RnVuY3Rpb25hbGl0eTAwMA"
                },
                "properties": {
                    "entity": {
                        "enum": [
                            "Functionality"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Functionality*",
                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "FunctionalityTag": {
                "maxLength": 21,
                "minLength": 1,
                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                "type": "string"
            },
            "Locale": {
                "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                "example": "fr-FR",
                "minLength": 2,
                "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                "type": "string"
            },
            "Metadata": {
                "additionalProperties": {
                    "description": "null/boolean/integer/number/string/object/array",
                    "x-type": "any"
                },
                "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                "type": "object"
            },
            "MetadataKey": {
                "maxLength": 21,
                "minLength": 1,
                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                "type": "string"
            },
            "MetadataPatch": {
                "properties": {
                    "add": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "list of pairs key/value to add/replace",
                        "type": "object"
                    },
                    "remove": {
                        "description": "list of keys to remove",
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "MetadataSelected": {
                "additionalProperties": {
                    "description": "null/boolean/integer/number/string/object/array",
                    "x-type": "any"
                },
                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                "type": "object"
            },
            "Notification": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "place": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "routing": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "place"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/places/{place}",
                        "rel": "place"
                    }
                ]
            },
            "NotificationCreated": {
                "description": "A resource has been created. The `resource` property gives its reference.",
                "example": {
                    "code": 201,
                    "message": "Notification created",
                    "resource": {
                        "entity": "Notification",
                        "href": "/notifications/InovwcCIGM5X7KvKrJ7vJw",
                        "id": "InovwcCIGM5X7KvKrJ7vJw"
                    }
                },
                "properties": {
                    "code": {
                        "enum": [
                            201
                        ],
                        "example": 201,
                        "type": "integer"
                    },
                    "message": {
                        "enum": [
                            "Notification created"
                        ],
                        "type": "string"
                    },
                    "resource": {
                        "example": {
                            "entity": "Notification",
                            "href": "/notifications/InovwcCIGM5X7KvKrJ7vJw",
                            "id": "InovwcCIGM5X7KvKrJ7vJw"
                        },
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Notification"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *Notification*",
                                "example": "InovwcCIGM5X7KvKrJ7vJw",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "NotificationId": {
                "description": "Unique identifier of the *Notification*",
                "example": "InovwcCIGM5X7KvKrJ7vJw",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "NotificationItem": {
                "description": "Notification",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the *Notification*",
                        "example": "InovwcCIGM5X7KvKrJ7vJw",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/notifications/{id}",
                        "rel": "full"
                    }
                ]
            },
            "NotificationNew": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "routing": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "NotificationPatch": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "routing": {
                        "format": "uri",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NotificationResource": {
                "example": {
                    "entity": "Notification",
                    "href": "/notifications/InovwcCIGM5X7KvKrJ7vJw",
                    "id": "InovwcCIGM5X7KvKrJ7vJw"
                },
                "properties": {
                    "entity": {
                        "enum": [
                            "Notification"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Notification*",
                        "example": "InovwcCIGM5X7KvKrJ7vJw",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "Password": {
                "format": "password",
                "minLength": 5,
                "type": "string"
            },
            "PhoneNumber": {
                "description": "Phone number of the *User* in international format, for SMS notifications.",
                "example": "+33177494646",
                "minLength": 6,
                "pattern": "^\\+[0-9]{5,}$",
                "type": "string"
            },
            "Place": {
                "properties": {
                    "account": {
                        "description": "Unique identifier of the *Account*",
                        "example": "t1hqYcQITCFX-AObjs_t4Q",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "country": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "example": "FR",
                        "maxLength": 2,
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Z]$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "example": "â Home",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                        "example": "Europe/Paris",
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                        "type": "string"
                    },
                    "zipCode": {
                        "description": "Postal code",
                        "maxLength": 10,
                        "minLength": 0,
                        "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "zipCode",
                    "country",
                    "timeZone"
                ],
                "type": "object"
            },
            "PlaceCreated": {
                "description": "A resource has been created. The `resource` property gives its reference.",
                "example": {
                    "code": 201,
                    "message": "Place created",
                    "resource": {
                        "entity": "Place",
                        "href": "/places/3HA6YcSCTSFX6SPPrI9PxQ",
                        "id": "3HA6YcSCTSFX6SPPrI9PxQ"
                    }
                },
                "properties": {
                    "code": {
                        "enum": [
                            201
                        ],
                        "example": 201,
                        "type": "integer"
                    },
                    "message": {
                        "enum": [
                            "Place created"
                        ],
                        "type": "string"
                    },
                    "resource": {
                        "example": {
                            "entity": "Place",
                            "href": "/places/3HA6YcSCTSFX6SPPrI9PxQ",
                            "id": "3HA6YcSCTSFX6SPPrI9PxQ"
                        },
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Place"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *Place*",
                                "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "PlaceId": {
                "description": "Unique identifier of the *Place*",
                "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "PlaceItem": {
                "properties": {
                    "id": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/places/{id}",
                        "rel": "full"
                    }
                ]
            },
            "PlaceNew": {
                "properties": {
                    "country": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "example": "FR",
                        "maxLength": 2,
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Z]$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "example": "â Home",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                        "example": "Europe/Paris",
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                        "type": "string"
                    },
                    "zipCode": {
                        "description": "Postal code",
                        "maxLength": 10,
                        "minLength": 0,
                        "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "zipCode",
                    "country",
                    "timeZone"
                ],
                "type": "object"
            },
            "PlacePatch": {
                "properties": {
                    "country": {
                        "description": "Country code (ISO 3166-1 alpha-2)",
                        "example": "FR",
                        "maxLength": 2,
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Z]$",
                        "type": "string"
                    },
                    "name": {
                        "example": "â Home",
                        "minLength": 1,
                        "type": "string"
                    },
                    "timeZone": {
                        "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                        "example": "Europe/Paris",
                        "minLength": 2,
                        "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                        "type": "string"
                    },
                    "zipCode": {
                        "description": "Postal code",
                        "maxLength": 10,
                        "minLength": 0,
                        "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PlaceResource": {
                "example": {
                    "entity": "Place",
                    "href": "/places/3HA6YcSCTSFX6SPPrI9PxQ",
                    "id": "3HA6YcSCTSFX6SPPrI9PxQ"
                },
                "properties": {
                    "entity": {
                        "enum": [
                            "Place"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "Program": {
                "properties": {
                    "code": {
                        "description": "null/boolean/integer/number/string/object/array",
                        "x-type": "any"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "place": {
                        "description": "Unique identifier of the *Place*",
                        "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "enabled",
                    "code"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/places/{place}",
                        "rel": "place"
                    }
                ]
            },
            "ProgramCreated": {
                "description": "A resource has been created. The `resource` property gives its reference.",
                "example": {
                    "code": 201,
                    "message": "Program created",
                    "resource": {
                        "entity": "Program",
                        "href": "/programs/3_J_6ZWICc5X_KverorNvw",
                        "id": "3_J_6ZWICc5X_KverorNvw"
                    }
                },
                "properties": {
                    "code": {
                        "enum": [
                            201
                        ],
                        "example": 201,
                        "type": "integer"
                    },
                    "message": {
                        "enum": [
                            "Program created"
                        ],
                        "type": "string"
                    },
                    "resource": {
                        "example": {
                            "entity": "Program",
                            "href": "/programs/3_J_6ZWICc5X_KverorNvw",
                            "id": "3_J_6ZWICc5X_KverorNvw"
                        },
                        "properties": {
                            "entity": {
                                "enum": [
                                    "Program"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *Program*",
                                "example": "3_J_6ZWICc5X_KverorNvw",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "ProgramId": {
                "description": "Unique identifier of the *Program*",
                "example": "3_J_6ZWICc5X_KverorNvw",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "ProgramItem": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "Unique identifier of the *Program*",
                        "example": "3_J_6ZWICc5X_KverorNvw",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "readOnly": true,
                "required": [
                    "id",
                    "name",
                    "enabled"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/programs/{id}",
                        "rel": "full"
                    }
                ]
            },
            "ProgramLog": {
                "properties": {
                    "actions": {
                        "items": {
                            "example": {
                                "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                "result": [],
                                "status": 200
                            },
                            "properties": {
                                "functionality": {
                                    "description": "Unique identifier of the *Functionality*",
                                    "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "result": {
                                    "items": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "type": "array"
                                },
                                "status": {
                                    "description": "Return code (HTTP status code)",
                                    "example": 200,
                                    "maximum": 599,
                                    "minimum": 200,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "status"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/functionalities/{functionality}",
                                    "rel": "functionality"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "errors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "notifications": {
                        "items": {
                            "description": "Unique identifier of the *Notification*",
                            "example": "InovwcCIGM5X7KvKrJ7vJw",
                            "maxLength": 22,
                            "minLength": 22,
                            "pattern": "^[A-Za-z0-9-_]{22}$",
                            "readOnly": true,
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "when": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "when"
                ],
                "type": "object"
            },
            "ProgramNew": {
                "example": {
                    "code": [],
                    "enabled": false,
                    "name": "NOOP"
                },
                "properties": {
                    "code": {
                        "description": "null/boolean/integer/number/string/object/array",
                        "x-type": "any"
                    },
                    "enabled": {
                        "default": true,
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "code"
                ],
                "type": "object"
            },
            "ProgramPatch": {
                "properties": {
                    "code": {
                        "description": "null/boolean/integer/number/string/object/array",
                        "x-type": "any"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProgramResource": {
                "example": {
                    "entity": "Program",
                    "href": "/programs/3_J_6ZWICc5X_KverorNvw",
                    "id": "3_J_6ZWICc5X_KverorNvw"
                },
                "properties": {
                    "entity": {
                        "enum": [
                            "Program"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *Program*",
                        "example": "3_J_6ZWICc5X_KverorNvw",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "ResourceRef": {
                "properties": {
                    "entity": {
                        "enum": [
                            "Device",
                            "Functionality",
                            "Notification",
                            "Place",
                            "Program",
                            "User",
                            "Account",
                            "AccountsBase"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "Tag": {
                "maxLength": 21,
                "minLength": 1,
                "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                "type": "string"
            },
            "Tags": {
                "items": {
                    "maxLength": 21,
                    "minLength": 1,
                    "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                    "type": "string"
                },
                "type": "array",
                "uniqueItems": true
            },
            "TagsPatch": {
                "properties": {
                    "add": {
                        "description": "list of tags to add",
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "remove": {
                        "description": "list of tags to remove",
                        "items": {
                            "maxLength": 21,
                            "minLength": 1,
                            "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "TimeZone": {
                "description": "A time zone name from the Time Zone Database at https://www.iana.org/time-zones",
                "example": "Europe/Paris",
                "minLength": 2,
                "pattern": "^[A-Z][A-Za-z0-9-_+]+(?:/[A-Z][A-Za-z0-9-_+]+)*$",
                "type": "string"
            },
            "TokenId": {
                "example": "dfSDdRcsd",
                "minLength": 1,
                "type": "string"
            },
            "User": {
                "properties": {
                    "account": {
                        "description": "Unique identifier of the *Account*",
                        "example": "t1hqYcQITCFX-AObjs_t4Q",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "canLogin": {
                        "default": false,
                        "description": "true if the user owning the account (can get tokens with /auth/login)",
                        "example": false,
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                        "example": "+33177494646",
                        "minLength": 6,
                        "pattern": "^\\+[0-9]{5,}$",
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "name",
                    "locale",
                    "canLogin"
                ],
                "type": "object"
            },
            "UserCreated": {
                "description": "A resource has been created. The `resource` property gives its reference.",
                "example": {
                    "code": 201,
                    "message": "User created",
                    "resource": {
                        "entity": "User",
                        "href": "/users/RGV2aWNlMDAwMDAwMDAwMZ",
                        "id": "RGV2aWNlMDAwMDAwMDAwMZ"
                    }
                },
                "properties": {
                    "code": {
                        "enum": [
                            201
                        ],
                        "example": 201,
                        "type": "integer"
                    },
                    "message": {
                        "enum": [
                            "User created"
                        ],
                        "type": "string"
                    },
                    "resource": {
                        "example": {
                            "entity": "User",
                            "href": "/users/RGV2aWNlMDAwMDAwMDAwMZ",
                            "id": "RGV2aWNlMDAwMDAwMDAwMZ"
                        },
                        "properties": {
                            "entity": {
                                "enum": [
                                    "User"
                                ],
                                "type": "string"
                            },
                            "href": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *User*",
                                "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "entity",
                            "href"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "resource"
                ],
                "type": "object"
            },
            "UserEmail": {
                "format": "email",
                "minLength": 6,
                "type": "string"
            },
            "UserId": {
                "description": "Unique identifier of the *User*",
                "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                "maxLength": 22,
                "minLength": 22,
                "pattern": "^[A-Za-z0-9-_]{22}$",
                "readOnly": true,
                "type": "string"
            },
            "UserItem": {
                "properties": {
                    "canLogin": {
                        "default": false,
                        "description": "true if the user owning the account (can get tokens with /auth/login)",
                        "example": false,
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *User*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                        "example": "+33177494646",
                        "minLength": 6,
                        "pattern": "^\\+[0-9]{5,}$",
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "name",
                    "locale",
                    "id"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/users/{id}",
                        "rel": "full"
                    }
                ]
            },
            "UserMe": {
                "properties": {
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *User*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    },
                    "login": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                        "example": "+33177494646",
                        "minLength": 6,
                        "pattern": "^\\+[0-9]{5,}$",
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "name",
                    "locale",
                    "id"
                ],
                "type": "object",
                "x-links": [
                    {
                        "href": "/account/users/{id}",
                        "rel": "full"
                    }
                ]
            },
            "UserMePatch": {
                "properties": {
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserNew": {
                "properties": {
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "description": "null/boolean/integer/number/string/object/array",
                            "x-type": "any"
                        },
                        "description": "Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.",
                        "type": "object"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                        "example": "+33177494646",
                        "minLength": 6,
                        "pattern": "^\\+[0-9]{5,}$",
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "name",
                    "locale"
                ],
                "type": "object"
            },
            "UserPatch": {
                "properties": {
                    "email": {
                        "format": "email",
                        "minLength": 6,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                        "example": "fr-FR",
                        "minLength": 2,
                        "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                        "type": "string"
                    },
                    "name": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "description": "Phone number of the *User* in international format, for SMS notifications.",
                        "example": "+33177494646",
                        "minLength": 6,
                        "pattern": "^\\+[0-9]{5,}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "example": {
                    "entity": "User",
                    "href": "/users/RGV2aWNlMDAwMDAwMDAwMZ",
                    "id": "RGV2aWNlMDAwMDAwMDAwMZ"
                },
                "properties": {
                    "entity": {
                        "enum": [
                            "User"
                        ],
                        "type": "string"
                    },
                    "href": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the *User*",
                        "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                        "maxLength": 22,
                        "minLength": 22,
                        "pattern": "^[A-Za-z0-9-_]{22}$",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "href"
                ],
                "type": "object"
            },
            "UserTokenItem": {
                "description": "Token for User API access",
                "properties": {
                    "appName": {
                        "description": "Application name",
                        "example": "Home Eopath",
                        "type": "string"
                    },
                    "id": {
                        "example": "dfSDdRcsd",
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastUse": {
                        "description": "Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "places": {
                        "description": "List of Places to which the User has access. If absent, it means any Place of the account are allowed.",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Unique identifier of the *Place*",
                                    "example": "3HA6YcSCTSFX6SPPrI9PxQ",
                                    "maxLength": 22,
                                    "minLength": 22,
                                    "pattern": "^[A-Za-z0-9-_]{22}$",
                                    "readOnly": true,
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "readOnly": true,
                            "required": [
                                "id",
                                "name"
                            ],
                            "type": "object",
                            "x-links": [
                                {
                                    "href": "/places/{id}",
                                    "rel": "full"
                                }
                            ]
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "refreshTokenExpires": {
                        "description": "If absent, infinite validity.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "self": {
                        "description": "True if this token is the one used for this API request",
                        "type": "boolean"
                    },
                    "user": {
                        "properties": {
                            "canLogin": {
                                "default": false,
                                "description": "true if the user owning the account (can get tokens with /auth/login)",
                                "example": false,
                                "readOnly": true,
                                "type": "boolean"
                            },
                            "email": {
                                "format": "email",
                                "minLength": 6,
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier of the *User*",
                                "example": "RGV2aWNlMDAwMDAwMDAwMZ",
                                "maxLength": 22,
                                "minLength": 22,
                                "pattern": "^[A-Za-z0-9-_]{22}$",
                                "readOnly": true,
                                "type": "string"
                            },
                            "locale": {
                                "description": "Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml .\n",
                                "example": "fr-FR",
                                "minLength": 2,
                                "pattern": "^[a-z]{2}[A-Za-z0-9-]*$",
                                "type": "string"
                            },
                            "metadata": {
                                "additionalProperties": {
                                    "description": "null/boolean/integer/number/string/object/array",
                                    "x-type": "any"
                                },
                                "description": "Subset of metadata attached to the resource selected using the 'embed-metadata' parameter",
                                "type": "object"
                            },
                            "name": {
                                "minLength": 1,
                                "type": "string"
                            },
                            "phoneNumber": {
                                "description": "Phone number of the *User* in international format, for SMS notifications.",
                                "example": "+33177494646",
                                "minLength": 6,
                                "pattern": "^\\+[0-9]{5,}$",
                                "type": "string"
                            }
                        },
                        "required": [
                            "email",
                            "name",
                            "locale",
                            "id"
                        ],
                        "type": "object",
                        "x-links": [
                            {
                                "href": "/users/{id}",
                                "rel": "full"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "appName",
                    "user"
                ],
                "type": "object"
            },
            "ZipCode": {
                "description": "Postal code",
                "maxLength": 10,
                "minLength": 0,
                "pattern": "^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$",
                "type": "string"
            }
        },
        "responses": {
            "ActionMultiResultOK": {
                "description": "Successful.",
                "content": {
                    "application/json": {
                        "schema": {
                            "items": {
                                "example": {
                                    "functionality": "RnVuY3Rpb25hbGl0eTAwMA",
                                    "result": [],
                                    "status": 200
                                },
                                "properties": {
                                    "functionality": {
                                        "description": "Unique identifier of the *Functionality*",
                                        "example": "RnVuY3Rpb25hbGl0eTAwMA",
                                        "maxLength": 22,
                                        "minLength": 22,
                                        "pattern": "^[A-Za-z0-9-_]{22}$",
                                        "readOnly": true,
                                        "type": "string"
                                    },
                                    "result": {
                                        "items": {
                                            "description": "null/boolean/integer/number/string/object/array",
                                            "x-type": "any"
                                        },
                                        "type": "array"
                                    },
                                    "status": {
                                        "description": "Return code (HTTP status code)",
                                        "example": 200,
                                        "maximum": 599,
                                        "minimum": 200,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object",
                                "x-links": [
                                    {
                                        "href": "/functionalities/{functionality}",
                                        "rel": "functionality"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    }
                }
            },
            "DefaultError": {
                "description": "Other error.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Any error.",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "code",
                                "message"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "DeleteOK": {
                "description": "Resource successfully deleted."
            },
            "ErrorAccessAccount": {
                "description": "The authentication token doesn't allow to modify the *Account*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessBus": {
                "description": "*Bus* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Action",
                                                "Attribute",
                                                "Bus"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parent": {
                                            "description": "Container resource.",
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Place",
                                                        "Functionality"
                                                    ],
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "entity",
                                                "id"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessDevice": {
                "description": "*Device* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessFunctionality": {
                "description": "*Functionality* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessNotification": {
                "description": "*Notification* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessPlace": {
                "description": "*Place* doesn't exist or the requester doesn't have access.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessProgram": {
                "description": "*Program* doesn't exist or the requester doesn't have appropriate access to the *Place*.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorAccessUser": {
                "description": "*User* doesn't exist in this *Account* or the requester doesn't have access to a *Place* on which this *User* has access.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Device",
                                                "Functionality",
                                                "Notification",
                                                "Place",
                                                "Program",
                                                "User",
                                                "Account",
                                                "AccountsBase"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorGatewayUnreachable": {
                "description": "The gateway of the Place is not reachable.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "The gateway of the Place is not reachable.",
                            "properties": {
                                "code": {
                                    "enum": [
                                        "450"
                                    ],
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "code",
                                "message"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "ErrorWriteAttribute": {
                "description": "*Attribute* is not writable.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "An error related to access to an sub-entity (400, 403, 404, 410)",
                            "properties": {
                                "code": {
                                    "type": "integer"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "resource": {
                                    "properties": {
                                        "entity": {
                                            "enum": [
                                                "Action",
                                                "Attribute",
                                                "Bus"
                                            ],
                                            "type": "string"
                                        },
                                        "href": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "id": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parent": {
                                            "description": "Container resource.",
                                            "properties": {
                                                "entity": {
                                                    "enum": [
                                                        "Place",
                                                        "Functionality"
                                                    ],
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "entity",
                                                "id"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "entity",
                                        "href"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "code",
                                "message",
                                "resource"
                            ],
                            "type": "object"
                        }
                    }
                }
            },
            "PatchNotModified": {
                "description": "Successful, but nothing changed."
            },
            "PatchOK": {
                "description": "Modification successful."
            }
        },
        "parameters": {
            "accountId": {
                "description": "Unique identifier of an *Account*.",
                "in": "path",
                "name": "accountId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "action": {
                "description": "Identifier of an *Action* inside a *Functionality*.",
                "in": "path",
                "name": "action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "attributeName": {
                "description": "Identifier of an *Attribute* inside a *Functionality*.",
                "in": "path",
                "name": "attributeName",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "attributesNames": {
                "description": "One or multiple *Attribute* names separated by commas",
                "in": "query",
                "name": "names",
                "required": false,
                "style": "form",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "busId": {
                "description": "Unique identifier of a *Bus*.",
                "in": "path",
                "name": "busId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "deviceId": {
                "description": "Unique identifier of a *Device*.",
                "in": "path",
                "name": "deviceId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "devicesSelector.Opt": {
                "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».",
                "in": "query",
                "name": "devices",
                "required": false,
                "schema": {
                    "type": "string",
                    "pattern": "^(?:\\\\*|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                }
            },
            "devicesSelector.Req": {
                "description": "Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».",
                "in": "query",
                "name": "devices",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^(?:\\\\*|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Z0-9]{3}|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                }
            },
            "embedMetadata": {
                "description": "Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored.\n**Note:** This only applies to the top level resources.\n",
                "in": "query",
                "name": "embed-metadata",
                "required": false,
                "style": "form",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "from.Opt": {
                "description": "Beginning of the time interval.",
                "in": "query",
                "name": "from",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "from.Req": {
                "description": "Beginning of the time interval.",
                "in": "query",
                "name": "from",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "functionalitiesSelector.Opt": {
                "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â».\n",
                "in": "query",
                "name": "functionalities",
                "required": false,
                "schema": {
                    "type": "string",
                    "pattern": "^(?:\\\\*|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                }
            },
            "functionalitiesSelector.Req": {
                "description": "Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â».\n",
                "in": "query",
                "name": "functionalities",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^(?:\\\\*|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22})(?:\\\\|(?:[A-Z][A-Za-z0-9]+(?:@(?:0|1[0-9]{,2}|[3-9][0-9]?|2(?:[0-4][0-9]?|5[0-5]?|[6-9])?))?|[a-z][a-z0-9_:]{0,20}|[A-Za-z0-9-_]{22}))*)$"
                }
            },
            "functionalityId": {
                "description": "Unique identifier of a *Functionality*.",
                "in": "path",
                "name": "functionalityId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "notificationId": {
                "description": "Unique identifier of a *Notification*.",
                "in": "path",
                "name": "notificationId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "placeId": {
                "description": "Unique identifier of a *Place*.",
                "in": "path",
                "name": "placeId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "programId": {
                "description": "Unique identifier of a *Program*.",
                "in": "path",
                "name": "programId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "span.Req": {
                "description": "Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)",
                "in": "query",
                "name": "span",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "H",
                        "D",
                        "Wmo",
                        "Wsu",
                        "M",
                        "Y"
                    ]
                }
            },
            "to": {
                "description": "End of the interval. Default: now.\n",
                "in": "query",
                "name": "to",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "tokenId": {
                "description": "Identifier of the token",
                "in": "path",
                "name": "tokenId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "userId": {
                "description": "Unique identifier of a *User*.",
                "in": "path",
                "name": "userId",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "when.Req": {
                "description": "A time part of the time span.",
                "in": "query",
                "name": "when",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "requestBodies": {
            "User.patchMetadataMetadatapatch": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "add": {
                                    "additionalProperties": {
                                        "description": "null/boolean/integer/number/string/object/array",
                                        "x-type": "any"
                                    },
                                    "description": "list of pairs key/value to add/replace",
                                    "type": "object"
                                },
                                "remove": {
                                    "description": "list of keys to remove",
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "description": "Modifications to apply to the metadata of the resource.\n",
                "required": true
            },
            "Device.runArguments": {
                "content": {
                    "application/json": {
                        "schema": {
                            "example": [
                                true,
                                1,
                                "hello"
                            ],
                            "items": {
                                "description": "null/boolean/integer/number/string/object/array",
                                "x-type": "any"
                            },
                            "type": "array"
                        }
                    }
                },
                "required": true
            },
            "Device.patchTagsTagspatch": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "add": {
                                    "description": "list of tags to add",
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "remove": {
                                    "description": "list of tags to remove",
                                    "items": {
                                        "maxLength": 21,
                                        "minLength": 1,
                                        "pattern": "^[a-z](?:[a-z0-9_]{0,20}|[a-z0-9_]:[a-z0-9_]{1,18}|[a-z0-9_]{2}:[a-z0-9_]{1,17}|[a-z0-9_]{3}:[a-z0-9_]{1,16}|[a-z0-9_]{4}:[a-z0-9_]{1,15})$",
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "description": "Modifications to apply to the tags list of the resource.\n",
                "required": true
            }
        },
        "securitySchemes": {
            "Token_in_Access-Token_header": {
                "description": "Token in Access-Token header",
                "in": "header",
                "name": "Access-Token",
                "type": "apiKey"
            },
            "Token_in_query": {
                "description": "Token in query",
                "in": "query",
                "name": "token",
                "type": "apiKey"
            }
        }
    }
}